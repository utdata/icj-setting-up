[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ICJ Setting Up",
    "section": "",
    "text": "Setting up your computer for ICJ\nFind the published version of this material here: ICJ Setting Up\nThis site outlines how to set up a computer for Intro to Coding for Journalists, a class in the School of Journalism and Media at the University of Texas at Austin. If you are new to coding, I suggest you begin with the Getting Started section there.\nBoth macOS and Windows platforms are covered with these instructions. Chromebooks and tablets are not supported for this class at this time.\nIf you are using a UT lab computer, get with your instructor.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Home</span>"
    ]
  },
  {
    "objectID": "index.html#about-the-author",
    "href": "index.html#about-the-author",
    "title": "ICJ Setting Up",
    "section": "About the author",
    "text": "About the author\nChristian McDonald\nAssociate Professor of Practice\nSchool of Journalism and Media\nMoody College of Communication\nUniversity of Texas at Austin\nI was a career journalist who most recently served as data and projects editor at the Austin American-Statesman before joining the journalism school full-time in fall 2018. I had been teaching data-related courses as a lecturer since 2013.\nI also serve as the innovation director of the Dallas Morning News Journalism Innovation Endowment.\n\nUT Data Github: utdata\nTwitter: crit | Mastodon crit | Bluesky: @crit\nEmail: christian.mcdonald@utexas.edu\n\nSpecial thanks to Michael Plunkett for helping figure out Google Cloud CLI.\n\nLicense\n\n\n\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Let’s just say this is free on the internet. I don’t make any money from it and you shouldn’t either.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Home</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html",
    "href": "setup-part-1.html",
    "title": "2  Part 1: Git, VS Code",
    "section": "",
    "text": "2.1 Install Git\nThis material assumes you have some familiarity with the Terminal on your computer. If this is new to you, you should consider going through the opening chapters of Intro to Coding for Journalists before returning here.\nWe will use the command-line interface offered by Terminal (or Git Bash on Windows) to install a bunch of stuff on you computer. During this setup you will be doing a bunch of steps on blind faith without much explanation, mostly downloading software and configuring it. I don’t go into a lot of details because these steps are typically only done once.\nYou’ll be using your Terminal (or GitBash on Windows), which is a program that allows you to talk to your computer using text. It might seem scary at first but you’ll soon get used to it as you’ll be using your Terminal throughout this class (mostly from within Visual Studio Code).\nBe sure to read all the directions for a particular section before diving in as there are hints that you’ll need as you install and configure.\nThere are some cases here where macOS and Windows differs greatly. I’ll try to make those differences clear.\nNote there are some platform differences here …",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#install-git",
    "href": "setup-part-1.html#install-git",
    "title": "2  Part 1: Git, VS Code",
    "section": "",
    "text": "macOSWindows\n\n\nHomebrew is a “package manager”, meaning it is a program to help you install other programs that are not in Apple’s app store … usually geeky things. We’ll use Homebrew to install Git, which you will learn more about soon.\n\nInstall Homebrew. Just go to that page and copy that first command noted and then run it in your terminal and then come back here. IT WILL TAKE SOME TIME. Once it is done …\nInstall Git using this homebrew command: brew install git.\n\nDon’t install any Git GUI clients. Git just lives inside your computer and we’ll use the Terminal to control it instead of a traditional “app”.\n\n\nIf you did the “Terminal” chapters in this book then you’ve already installed Git and you can move onto the next section to configure it.\nIf you haven’t for some reason, download it from Git Downloads and install it. When asked to “Adjust your PATH environment” choose “Use Git from Git Bash only”.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#configure-git",
    "href": "setup-part-1.html#configure-git",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.2 Configure git",
    "text": "2.2 Configure git\nHere we’ll update some settings within git on your machine.\nFirst we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name in quotes instead of “Mona Lisa”:\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\nIn your Terminal do this but use your email:\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account.\nLastly we’ll set git to name your default branch “main” instead of “master” as this is a new standard.\nIn your terminal, run this:\ngit config --global init.defaultBranch main\nYou won’t get a response unless there was a problem.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#set-up-github",
    "href": "setup-part-1.html#set-up-github",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.3 Set up GitHub",
    "text": "2.3 Set up GitHub\nIf you don’t already have a GitHub account, go to github.com and create an account.\n\n\n\n\n\n\nImportant\n\n\n\nChoose your Github username carefully and don’t make the name specific to this class. This is your personal GitHub profile FOREVER. I would also avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#saving-your-github-credentials",
    "href": "setup-part-1.html#saving-your-github-credentials",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.4 Saving your GitHub credentials",
    "text": "2.4 Saving your GitHub credentials\n\n\n\n\n\n\nImportant\n\n\n\nIf you have ever set up SSH keys before, find the instructor. (If you don’t understand that sentence, you likely haven’t.)\n\n\nWe’re going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doesn’t like sending your password around). It will seem complicated, but it’s not really.\nThese directions from from here (macOS | Windows) but try the steps for your computer listed below as they are streamlined.\n\nDuring this process, you’ll be asked to save the location of the rsa_id. Just hit return to save the default location.\nYou’ll also be asked to set a password for the file. JUST LEAVE THE PASSWORD BLANK and hit return. It will ask you a couple of times.\nAt the end of the installation, it will give a path to the rsa_id file. We might need to open this file in the next step to copy it. Ask for help at this step.\n\n\nIn your terminal, run the following command but with your email:\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nWhen it prompts you about a location, JUST HIT RETURN to accept the default.\nwhen it prompts you for a passphrase, JUST HIT RETURN to leave it blank.\n\nYou should get a nice little art looking return on your terminal, eventually.\nWhat those steps did is create a file on your computer and put inside of it a bunch of random characters.\nTo “copy” the contents of this file, the command differs between macOS and Windows:\n\nmacOSWindows\n\n\n\nOnce you are through the steps above, do the following command:\n\npbcopy &lt; ~/.ssh/id_ed25519.pub\n\n\n\nOnce you are through the steps above, do the following command:\n\nclip &lt; ~/.ssh/id_ed25519.pub\n\n\n\nThis copies the contents of that file you created to your clipboard. It’s like opening the file and copying the contents.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#saving-ssh-key-in-github",
    "href": "setup-part-1.html#saving-ssh-key-in-github",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.5 Saving SSH key in Github",
    "text": "2.5 Saving SSH key in Github\nNow we’ll save the contents of that secret file on your computer into your Github account so Github “knows” about your computer.\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, so Command-V to paste your key into the box.\n\nIt will look something like this (but the contents will be different):\n\n\n\nSaving the key\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n2.5.1 Test Github connection\n\nFrom your Terminal, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!\n\n\n\n2.5.2 Alternative to SSH keys\nIf you can’t set SSH keys, you can at least reduce the number of times you have to enter your GitHub name/password by caching your password. We’ll have to use this method for lab computers.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#text-editor",
    "href": "setup-part-1.html#text-editor",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.6 Text editor",
    "text": "2.6 Text editor\nWe will use the code editor Visual Studio Code, made by Microsoft. It is free. We need to install it now.\n\nInstall the code editor Visual Studio Code on your machine.\nAfter you’ve installed it, launch Visual Studio Code.\nOpen the Command Palette (View &gt; Command Palette) and type in &gt;shell command and look for the return Shell Command: Install ‘code’ command in PATH. Choose that.\n\n\n\n\nAdd code to path\n\n\nIt allows us to open files in VS Code directly from a Terminal.\n\n\n\n\n\n\nImportant\n\n\n\nWindows users have one more thing to do: We need to configure your VS Code integrated terminal to use Git Bash.\n\nGo to View &gt; Command Palette and type in &gt;Terminal: Select Default Shell and choose it.\nWhen it prompts you with choices, choose git bash.\n\n\n\n\n2.6.1 Test the path\n\nClose your Terminal and restart it.\nType code ./ and see it opens VS Code.\n\nHollar if it doesn’t. We need that to work before the next step.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#installing-bash-git-prompt",
    "href": "setup-part-1.html#installing-bash-git-prompt",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.7 Installing bash-git-prompt",
    "text": "2.7 Installing bash-git-prompt\nThis next tool gives us some feedback in our Terminal when we are using git.\n\nOpen a new Git Bash window to install the git-bash-prompt with the following command:\n\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\nThis should install the software you need to your home directory.\n\nNow we’ll open (or create) a settings file for bash:\n\ncode ~/.bash_profile\n\n\n\n\n\n\nNote\n\n\n\nIf the above command doesn’t open the file in VS Code then you didn’t set the code command in the “Code Editor” section. First quit/relaunch Terminal and try again. If that doesn’t work, go back to “Launching from the command line” and do that again.)\n\n\n\nOnce your .bash_profile opens in VS Code, copy and paste this into the bottom of the file based on your operating system. (If there is any content in the file already, leave that there.)\n\n\nmacOSWindows\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\n\n# sets shorter prompt name\nPS1='\\u:\\W\\$ '\n\n# hides zsh prompt\nexport BASH_SILENCE_DEPRECATION_WARNING=1\nIn addition to adding some commands to help you with git, we also added something to shorten your terminal prompt. We also added a command to stop asking you to change to zsh.\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\nThis tells your terminal to use the gitprompt software we installed above.\n\n\n\n\nClose and restart your Terminal program to load the new settings.\n\n\n\n\n\n\n\nIf you want to read more about git-bash-prompt, you can here. Totally optional. We’ll talk about it later.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#vs-code-extensions",
    "href": "setup-part-1.html#vs-code-extensions",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.8 VS Code extensions",
    "text": "2.8 VS Code extensions\nIf you look on the left-menu of Visual Studio code, there is a square puzzle looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\n\nIn VS Code, click on the Extensions icon.\nIn the search box, type in Live Server and find the one created by Ritwick Dey.\nClick the Install button on that page.\nDo the same for markdownlint by David Anson.\nDo the same for Nunjucks by ronnidc.\nDo the same for Path Intellisense by Christian Kohler.\n\nThese all make Visual Studio Code more awesomer in different ways.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#vs-code-preferences",
    "href": "setup-part-1.html#vs-code-preferences",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.9 VS Code preferences",
    "text": "2.9 VS Code preferences\nI have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Preferences &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\n\n\n\nvs-code-setting-as-code\n\n\n\nIn the new file that opens, copy and paste the code below and replace what is there.\n\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2,\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    },\n}\n\nSave and close the file.\n\nThis sets the default text size, line wrapping, tab stops and other useful things we will need. If you find the text too big, you can change the number in the configuration.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#use-google-chrome",
    "href": "setup-part-1.html#use-google-chrome",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.10 Use Google Chrome",
    "text": "2.10 Use Google Chrome\nI will be using Google Chrome in class because it has lots of development tools built in that are essential to the class. Safari also has those tools, but they need to be activated. I’m sure other browsers have development tools, but you are on your own figuring them out.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-1.html#testing-part-1-setup",
    "href": "setup-part-1.html#testing-part-1-setup",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.11 Testing Part 1 setup",
    "text": "2.11 Testing Part 1 setup\nWe need to make sure everything is set correctly before moving on. So here is how to check:\nBefore doing this, open a new Terminal window:\n\nDo git config user.name and you should get a response that is your name.\nDo git config user.email and you should get back your email address.\nDo ssh -T git@github.com to test SSH keys. If you are asked about “RSA key fingerprint”, say yes. In the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.”\nDo ls -a | grep bash and you should get a list that includes at least “.bash-git-prompt” and “.bash_profile”.\nDo code ~/.bash_profile and it should open your bash_profile, which should have (at least):\n\n\nmacOSWindows\n\n\n\n\n\ngit-bash-prompt\n\n\n\n\n\n\n\ngit-bash-prompt",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Git, VS Code</span>"
    ]
  },
  {
    "objectID": "setup-part-2.html",
    "href": "setup-part-2.html",
    "title": "3  Part 2: Google auth",
    "section": "",
    "text": "3.1 Github Codespaces\nAbout half way through the semester we start using Node-based development environments. This page covers setup for that using Codespaces.\nIn the last few years, virtual computing has become so prevalent and cheap that we may not need to do this kind of development locally. Github has a virtual machine (VM) called Codespaces that is baked right into your repo.\nUsing Codespaces saves us from some computer setup because the virtual computer recognizes and installs most of what we need.\nWe handle to how to start a new codespace from a repo in Intro to Coding for Journalists.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Google auth</span>"
    ]
  },
  {
    "objectID": "setup-part-2.html#google-cloud-services",
    "href": "setup-part-2.html#google-cloud-services",
    "title": "3  Part 2: Google auth",
    "section": "3.2 Google Cloud services",
    "text": "3.2 Google Cloud services\nWhen we start building projects using the icj-project-rig there is a feature that allows non-coders to store and edit data in Google Docs and Google Sheets, but allow us to then “fetch” that content as data into our project.\nTo do this, we access to Google Cloud’s application programming interfaces, or APIs. Having these will allow us to use our code to talk to Google Sheets and Google Docs.\nThis requires a non-UT gmail account and some setup.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Google auth</span>"
    ]
  },
  {
    "objectID": "setup-part-2.html#overall-steps",
    "href": "setup-part-2.html#overall-steps",
    "title": "3  Part 2: Google auth",
    "section": "3.3 Overall steps",
    "text": "3.3 Overall steps\nThese are the general steps, but the details are below.\n\nFrom the Google Cloud Console, create a new project\nEnable APIS for Drive, Docs Sheets\nCreate a Service Account in IAM\nCreate a Key\nCreate a CodeSpaces secret\nShare it with your repository\nCopy that Key into the CodeSpaces secret",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Google auth</span>"
    ]
  },
  {
    "objectID": "setup-part-2.html#start-with-non-ut-gmail-account",
    "href": "setup-part-2.html#start-with-non-ut-gmail-account",
    "title": "3  Part 2: Google auth",
    "section": "3.4 Start with non-UT gmail account",
    "text": "3.4 Start with non-UT gmail account\nThe Google features we want to access are not avilable through your UTMail Google account, and perhaps not by other “organizational” accounts. What you need here is a good ol’ generic @gmail.com account. If you don’t have one already, create one and log in and make sure you use that browser window.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Google auth</span>"
    ]
  },
  {
    "objectID": "setup-part-2.html#creating-a-project",
    "href": "setup-part-2.html#creating-a-project",
    "title": "3  Part 2: Google auth",
    "section": "3.5 Creating a project",
    "text": "3.5 Creating a project\nOur first step will to create a Google Cloud “project” that will hold all your credentials.\n\nIn the browser logged into your gmail account, go to https://console.cloud.google.com/projectcreate\nFor the Project name use: ICJ Project Rig\nFor the Location, leave it as No organization.\n\n\n\nGCloud project\n\n\nClick Create.\nThis will take a couple of seconds to complete and you’ll be taken to a new screen. As part of that you’ll get a Notification.\n\n\n\nNotifcaiton\n\n\nClick on the SELECT PROJECT link in the notificaiton.\nOnce you do that, you should see the project listed next to the Google Cloud logo.\n\n\n\nProject selected",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Google auth</span>"
    ]
  },
  {
    "objectID": "setup-part-2.html#enable-apis",
    "href": "setup-part-2.html#enable-apis",
    "title": "3  Part 2: Google auth",
    "section": "3.6 Enable APIs",
    "text": "3.6 Enable APIs\n\nScroll down the page to find the Getting Started panel, then find Explore and enable APIs and click on it.\n\n\n\nFind APIs\n\n\nYou’ll be taken to a new page that wil have a blue-bordered button ENABLE APIS AND SERVICES. Click it.\n\n\n\nAPI button\n\n\nYou’ll be taken to yet a new page with a search bar. Type in “Google Drive” and search. In the search return, among the top results should be Google Drive API, which is what we want. (We don’t need the “Activity” version.)\n\n\n\nDrive API\n\n\nClick on the Google Drive API result.\nThen click the blue ENABLE button.\n\n\n\nEnable API\n\n\nYou’ll be taken to a new page, but the API is now enabled. Click on the Enable APIs & services link on the left navigation.\n\n\n\nBack to APIs\n\n\n\n\n3.6.1 Repeat for other APIs\nNow you need to Click on the blue-bordered +ENABLE APIS AND SERVICES button again and go through the same steps to search for and enable two more APIs:\n\nGoogle Docs API\nGoogle Sheets API",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Google auth</span>"
    ]
  },
  {
    "objectID": "setup-part-2.html#adding-a-service-account",
    "href": "setup-part-2.html#adding-a-service-account",
    "title": "3  Part 2: Google auth",
    "section": "3.7 Adding a service account",
    "text": "3.7 Adding a service account\nA “service account” is a credential that allows you to interact with the APIs we just enabled.\n\nGo to the search bar and type in service account. As you type, you should see the Service Accounts tool show up. Click on it.\n\n\n\nService search\n\n\nNext you want to click on the + CREATE SERVICE ACCOUNT linke.\n\n\n\nCreate Service Account\n\n\nFill out the fields as follows:\n\nService account name: icj-user\nService account id (this should get filled out automatically): icj-user\nService account description: ICJ Final Project\n\nClick Create and continue to make the account.\nClick Done. Once that is created, you are taken to another screen.\nClick on the service account link name.\n\n\n\nOpen service account",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Google auth</span>"
    ]
  },
  {
    "objectID": "setup-part-2.html#create-service-account-key",
    "href": "setup-part-2.html#create-service-account-key",
    "title": "3  Part 2: Google auth",
    "section": "3.8 Create service account key",
    "text": "3.8 Create service account key\nNow that you have the service account, we need to create a key for it. This is the credential that will allow us to access these APIs from our code.\n\nClick on the Key tab.\nUnder the ADD KEY button, choose Create new key.\n\n\n\nCreate key\n\n\nAnd then you get a window to choose the file format. Choose JSON.\n\n\n\nPick JSON\n\n\nA file gets created and it should save automatically do your Downloads folder. It’s called something like icj-project-rig-8cbb102dgaf8.json.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Google auth</span>"
    ]
  },
  {
    "objectID": "setup-part-2.html#add-key-to-codespaces",
    "href": "setup-part-2.html#add-key-to-codespaces",
    "title": "3  Part 2: Google auth",
    "section": "3.9 Add key to Codespaces",
    "text": "3.9 Add key to Codespaces\n\nNOTE: It is absolutely imperative that you DO NOT commit the contents of service_account_key.json as a file in a project. If someone else were able to see the contents of that file, they could execute any action that service account has in its abilities. Since service_account_key.json is in the .gitignore file, you should not be able to check it in, but it is important to remember that for the sake of transparency.\n\nOur aim now is to save the contents of that downloaded file into Github, and then to share it with repos that need it.\n\nIn a browser logged into Github, go to https://github.com/settings/codespaces.\nUnder Secrets it probably says there are no secrets and a button for New secret. Use that to create a New secret.\n\n\n\nNew key\n\n\nFor the Name, use exactly this: SERVICE_ACCOUNT_CREDENTIALS\nFor the value, you want to paste in the content of the downloaded .json file from the last step. So, you’ll want to use Visual Studio Code on your computer to open that file from your Downloads folder and copy/paste the entire contents into the value field.\nUnder Select repositories, you want to choose use the dropdown to search for and click the checkmark for your project repo that needs this secret.\n\n\n\nKey crendtials\n\n\n\nIf you create different repos later that need this same Codespace secret, you can come back to here, edit the existing key and add the repo.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Google auth</span>"
    ]
  },
  {
    "objectID": "setup-part-2.html#test-the-credential",
    "href": "setup-part-2.html#test-the-credential",
    "title": "3  Part 2: Google auth",
    "section": "3.10 Test the credential",
    "text": "3.10 Test the credential\nNow you’ll want to go back to the codespace for your project and test that you completed your access.\n\nLaunch the codespace where you want to test the credential.\nIn the Terminal, run:\necho $SERVICE_ACCOUNT_CREDENTIALS\nIn return, you should get some JSON that starts with \"type\": \"service_account\"\n\nIf you using the icj-project-rig, you should try to download the connected Google Sheet and Google Docs data, which is why we did all this!\n gulp fetch\nYou’ll should get a return that says you downloaded library and bookstores:\n[12:34:05] Starting 'fetch'...\n[12:34:05] Finished 'fetch' after 1.96 ms\nDownloaded `library` (1RgMhjtkXlbbf9uzSzy_xPRKwxcVZIZqVytgM_JoU4E4)\nDownloaded `bookstores` (1gDwO-32cgpBDn_0niV0iu6TqQTaRDr4nmSqnT53magY)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Google auth</span>"
    ]
  },
  {
    "objectID": "vscode-goodies.html",
    "href": "vscode-goodies.html",
    "title": "Appendix A — VS Code Goodies",
    "section": "",
    "text": "A.1 Extensions\nVS Code is a pretty awesome code editor. It can save you a $4!t-ton of time.\nWe will need to install some of these extesions in your Codespace.\nIf you look on the left-menu, there is a square looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\nSome of those that I have used (and I’m finding more every day):",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>VS Code Goodies</span>"
    ]
  },
  {
    "objectID": "vscode-goodies.html#extensions",
    "href": "vscode-goodies.html#extensions",
    "title": "Appendix A — VS Code Goodies",
    "section": "",
    "text": "Nunjucks Templates: gives you syntax highlighting for Nunjucks pages. Needs a little configuration to work with our First Graphics App pages. See Preferences below.\nmarkdownlint: tells you when your Markdown syntax is incorrect.\n\n\nA.1.1 Optional\n\nExcel Viewer: is something to help preview csv files. Not essential, but helpful when working with data.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>VS Code Goodies</span>"
    ]
  },
  {
    "objectID": "vscode-goodies.html#preferences",
    "href": "vscode-goodies.html#preferences",
    "title": "Appendix A — VS Code Goodies",
    "section": "A.2 Preferences",
    "text": "A.2 Preferences\nI have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Settings &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\n\n\n\nvs-code-setting-as-code\n\n\n\nIn the new file that opens, copy and paste the code below and replace what is there.\nSave and close the file.\n\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    }\n}\nIf you look through the JSON, you might be able to figure out what some of these do. This isn’t a full description of them, but …\n\nI set default size of text in the editor. I’m old, so I make it bigger so it’s easier to read. If that is too big, you can change it later.\nI set make the text in the terminal window bigger. Still old.\nI set the editor to show spaces that aren’t between words. This makes indented code easier to see.\nI set the tab character to insert two spaces. This is a common coding default.\nI remove the minimap thing that shows by default at the right side of an open file. I find it more of a hassle than useful.\n\nThere are more. They will be helpful.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>VS Code Goodies</span>"
    ]
  },
  {
    "objectID": "setup-local-dev.html",
    "href": "setup-local-dev.html",
    "title": "Appendix B — Local Node development",
    "section": "",
    "text": "B.1 Installing Node\nNode is a Javascript runtime environment we will use to build news applications. Installation is different for Mac vs Windows.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Local Node development</span>"
    ]
  },
  {
    "objectID": "setup-local-dev.html#installing-node",
    "href": "setup-local-dev.html#installing-node",
    "title": "Appendix B — Local Node development",
    "section": "",
    "text": "MacWindows\n\n\nWe need to make sure you have xcode tools first.\n\nB.1.0.1 Checking xcode\n\nRun this in your Terminal:\nxcode-select -p\n\nYou should get a path in return. Something like “/Library/Developer/CommandLineTools”.\nIf you don’t AND ONLY IF YOU DON’T, you need to install it.\n\n\nB.1.0.2 Installing xcode-select (only if needed)\n\nIn your Terminal run this:\nxcode-select --install\nA software update popup window will appear that asks: “The xcode-select command requires the command line developer tools. Would you like to install the tools now?” choose to confirm this by clicking Install, then agree to the Terms of Service when requested (feel free to read them thoroughly, we’ll be here).\n\nIt can take a long while to download and install. If you get an error on this install, let me know as I have a copy I can give you.\n\n\nB.1.0.3 NVM\nWe will use NVM to install Node.js. Again, follow the prompts and you should be fine.\n\nGo to this page and copy the first code chunk that starts with curl.\nPaste that into your Terminal and run it.\nAfter it is done, quit Terminal and relaunch it.\nTest: After relaunching a terminal do nvm list to make sure you don’t get an error.\n\n\n\nB.1.0.4 Node\nUse NVM to install Node.\n\nInstall the long-term support of Node:\nnvm install --lts\nTest: Do node -v to make sure it worked. It should give you back a version, like “v18.18.0”.\n\n\n\n\nMicrosoft recommends using nvm-windows to install node, so let’s go with that.\n\nFollow these directions to install nvm-windows BUT READ THE NEXT STEPS FIRST.\n\nWhen they say Launch Powershell, you should use Git Bash instead.\nWhen it gets to installing Node.js DON’T DO nvm install latest. Instead, use this command:\nnvm install --lts\n\nTo make sure it worked, in Git Bash do:\nnode --version\n\nYou should get a response that says you are using a version, like v18.18.0.\n\n\n\n\n\n\nB.1.1 Update npm\nNPM is a package repository. We need to update it.\n\nTo update npm, run this:\nnpm install -g npm\nTest: Do npm -v and it should return with a version number.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Local Node development</span>"
    ]
  },
  {
    "objectID": "setup-local-dev.html#icj-project-setup",
    "href": "setup-local-dev.html#icj-project-setup",
    "title": "Appendix B — Local Node development",
    "section": "B.2 ICJ project setup",
    "text": "B.2 ICJ project setup\nThere are some additional global npm tools that we need to install for our tour of NodeJS-based build tools.\n\nRun this:\nnpm install -g gulp degit\n\nThese are for the task manager Gulp and a scaffolding tool Degit.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Local Node development</span>"
    ]
  },
  {
    "objectID": "setup-local-dev.html#google-cloud-services",
    "href": "setup-local-dev.html#google-cloud-services",
    "title": "Appendix B — Local Node development",
    "section": "B.3 Google Cloud services",
    "text": "B.3 Google Cloud services\nThere is one more setup necessary to connect the icj-project-rig to Google Sheets and Docs, but there are multiple ways to go about it.\n\nB.3.1 Google CLI\nYou can follow the Google CLI steps, which will save a JSON credential key to your computer and allow for local development. Those directions also show how you can add the key to Github for Codespaces.\n\n\nB.3.2 Web credentials\n\nOR, AND THIS IS ACTUALLY UNTESTED …\n\nYou can go through Setup Part 2 which goes through using web interfaces to set up credentials. Once that process is done, you have an additional setup to intall your credential in you bash profile:\n\nTake the JSON file that was downloaded (something like icj-project-rig-8caa102dfbf6.json) and rename it to exactly this: service_account_key.json. Leave it in your Downloads folder for now.\nWith the next command, we’ll create a hidden folder and then copy the .json file into it. These are two different commands:\nmkdir ~/.config/icj\ncp ~/Downloads/service_account_key.json ~/.config/icj/service_account_key.json\nWe’ve left a copy of the file in Downloads just for safety. Once everything works, you should be able to remove it.\nNow we need to add the path to that file to your .bash_profile, which we’ll do with the following command:\necho 'export GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/.config/icj/service_account_key.json\"' &gt;&gt;~/.bash_profile\n\nYou should then test if it is working by going into a project that uses the icj-project-rig, launching a new Terminal and running gulp fetch. That should download the libary and bookstores files.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Local Node development</span>"
    ]
  },
  {
    "objectID": "setup-gcloud-cli.html",
    "href": "setup-gcloud-cli.html",
    "title": "Appendix C — Google auth via cli",
    "section": "",
    "text": "C.0.1 Install Google Cloud tools\nThere is a point in class when your computer will need access to your Google Drive account. Much like ssh keys, we’ll need specific credentials that work only for you. We will use the Google Cloud Project’s command line interface tool to do this. Otherwise known as the gcloud CLI.\nAgain, differences between macOS and Windows.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Google auth via cli</span>"
    ]
  },
  {
    "objectID": "setup-gcloud-cli.html#test-these-settings",
    "href": "setup-gcloud-cli.html#test-these-settings",
    "title": "Appendix C — Google auth via cli",
    "section": "C.1 Test these settings",
    "text": "C.1 Test these settings\n\nCreate a folder in your icj folder called yourname-test.\nOpen that folder in Visual Studio Code.\nOpen a VS Code Terminal and run:\ndegit utdata/icj-google-fetch-test#main\n\nYou should get this in return:\n&gt; cloned utdata/icj-google-fetch-test#main\nAnd it will download a bunch of files into your folder.\n\nRun npm install. This will also download a bunch of files. It might take a couple of minutes to run.\nRun gulp fetch.\n\nIf everything works, you should have a return like this:\n$ gulp fetch\n[14:38:53] Using gulpfile ~/Documents/icj/icj-fetch-test/gulpfile.js\n[14:38:53] Starting 'fetch'...\n[14:38:53] Finished 'fetch' after 8.61 ms\nDownloaded `library` (1RgMhjtkXlbbf9uzSzy_xPRKwxcVZIZqVytgM_JoU4E4)\nDownloaded `bookstores` (1gDwO-32cgpBDn_0niV0iu6TqQTaRDr4nmSqnT53magY)\nYour path might differ for “Using gulpfile”, but what you are looking for is that two files were downloaded, one called library and one called bookstores.\n\nYou should be done!",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Google auth via cli</span>"
    ]
  },
  {
    "objectID": "setup-gcloud-cli.html#google-auth-access",
    "href": "setup-gcloud-cli.html#google-auth-access",
    "title": "Appendix C — Google auth via cli",
    "section": "C.2 Google auth access",
    "text": "C.2 Google auth access\nThere is one gulp command that will not work in Codespaces unless you jump through some extra hoops.\ngulp fetch is the command that downloads Google Docs and Sheets documents as JSON, as outlined in project.config.json. The process expects to find an authorization file on your own computer that we set up in icj-setting-up Part 2, but that file doesn’t exist on the Codespaces virtual machine.\nYou’ll need to set up two environment variables to make it work.\n\nNOTE: It is absolutely imperative that you DO NOT commit the contents of service_account_key.json to your branch at all. If someone else were able to see the contents of that file, they could execute any action that service account has in its abilities. Since service_account_key.json is in the .gitignore file, you should not be able to check it in, but it is important to remember that for the sake of transparency.\n\nWe will be following the process shown here\nAs you follow those steps you’ll need the information below.\n\nC.2.1 Codespaces secret\n\nThe “Name” of the secret will be SERVICE_ACCOUNT_CREDENTIALS.\nThe “Content” of the secret will be the contents of the file created in ICJ setup Part 2. You should be able to “copy” that file from your terminal by running the following command:\npbcopy &lt; $HOME/.config/gcloud/service_account_key.json\nReturn to your web browser and for the “Value” do Cmd-v to paste the contents of your clipboard.\nAt the step you add repositories, you’ll need to add your repo that is a copy of the icj-project-rig.\n\nIf you build other projects that need the credential, you can come here and edit the secret to add the new repo.\n\n\nC.2.2 Might have to restart\nIf you already had a Codespace running, you might have to stop and restart it to recognize the new secret.\nYou could try this command below first, but I’m not certain it will work.\nnpm run codespace-google-auth\nAfter doing that, you should be able to run gulp fetch to update the data JSON files.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Google auth via cli</span>"
    ]
  },
  {
    "objectID": "setup-gcloud-cli.html#gcloud-cli-commands",
    "href": "setup-gcloud-cli.html#gcloud-cli-commands",
    "title": "Appendix C — Google auth via cli",
    "section": "C.3 gcloud cli commands",
    "text": "C.3 gcloud cli commands\nThis is for Prof. McDonald’s memory and you shouldn’t have to worry about it.\nWe end up using the Google Cloud SDK to set up authorization to allow programming access to Google Docs and Sheets. Some useful commands:\n\ngcloud auth list tells you which account you are in and how to set a new active account.\ngcloud auth revoke logs you out of your active account. --all flag logs you out of all accounts, I think.\ngcloud projects list shows all the projects for the account.\ngcloud config get-value project shows you which project you are in.\ngcloud config set project [project-id] but replace [project-id] with the project name.\n\nSee Setting Up Part 2 for commands to set up a project and enable the APIs.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Google auth via cli</span>"
    ]
  }
]