[
  {
    "objectID": "setup-part-1.html",
    "href": "setup-part-1.html",
    "title": "Setup: Part 1",
    "section": "",
    "text": "Now that you have a little familiarity with you Terminal on your computer, we’re going to use it to install a bunch of stuff on you computer. During this setup you will be doing a bunch of steps on blind faith without much explanation, mostly downloading software and configuring it. I don’t go into a lot of details because these steps are typically only done once.xw\nYou’ll be using your Terminal (or GitBash on Windows), which is a program that allows you to talk to your computer using text. It might seem scary at first but you’ll soon get used to it as you’ll be using your Terminal throughout this class (mostly from within Visual Studio Code).\nBe sure to read all the directions for a particular section before diving in as there are hints that you’ll need as you install and configure.\nThere are some cases here where macOS and Windows differs greatly. I’ll try to make those differences clear.\n\n\nNote there are some platform differences here …\n\nmacOSWindows\n\n\nHomebrew is a “package manager”, meaning it is a program to help you install other programs that are not in Apple’s app store … usually geeky things. We’ll use Homebrew to install Git, which you will learn more about soon.\n\nInstall Homebrew. Just go to that page and copy that first command noted and then run it in your terminal and then come back here. IT WILL TAKE SOME TIME. Once it is done …\nInstall Git using this homebrew command: brew install git.\n\nDon’t install any Git GUI clients. Git just lives inside your computer and we’ll use the Terminal to control it instead of a traditional “app”.\n\n\nIf you did the “Terminal” chapters in this book then you’ve already installed Git and you can move onto the next section to configure it.\nIf you haven’t for some reason, download it from Git Downloads and install it. When asked to “Adjust your PATH environment” choose “Use Git from Git Bash only”.\n\n\n\n\n\n\nHere we’ll update some settings within git on your machine.\nFirst we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name in quotes instead of “Mona Lisa”:\n\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\n\nIn your Terminal do this but use your email:\n\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account.\nLastly we’ll set git to name your default branch “main” instead of “master” as this is a new standard.\n\nIn your terminal, run this:\n\ngit config --global init.defaultBranch main\nYou won’t get a reponse unless there was a problem.\n\n\n\nIf you don’t already have a GitHub account, go to github.com and create an account.\n\n\n\n\n\n\nImportant\n\n\n\nChoose your Github username carefully and don’t make the name specific to this class. This is your personal GitHub profile FOREVER. I would also avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them.\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIf you have ever set up SSH keys before, find the instructor. (If you don’t understand that sentence, you likely haven’t.)\n\n\nWe’re going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doesn’t like sending your password around). It will seem complicated, but it’s not really.\nThese directions from from here (macOS | Windows) but try the steps for your computer listed below as they are streamlined.\n\nDuring this process, you’ll be asked to save the location of the rsa_id. Just hit return to save the default location.\nYou’ll also be asked to set a password for the file. JUST LEAVE THE PASSWORD BLANK and hit return. It will ask you a couple of times.\nAt the end of the installation, it will give a path to the rsa_id file. We might need to open this file in the next step to copy it. Ask for help at this step.\n\n\nIn your terminal, run the following command but with your email:\n\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\nWhen it prompts you about a location, JUST HIT RETURN to accept the default.\nwhen it prompts you for a passphrase, JUST HIT RETURN to leave it blank.\n\nYou should get a nice little art looking return on your terminal, eventually.\nWhat those steps did is create a file on your computer and put inside of it a bunch of random characters.\nTo “copy” the contents of this file, the command differs between macOS and Windows:\n\nmacOSWindows\n\n\n\nOnce you are through the steps above, do the following command:\n\npbcopy &lt; ~/.ssh/id_ed25519.pub\n\n\n\nOnce you are through the steps above, do the following command:\n\nclip &lt; ~/.ssh/id_ed25519.pub\n\n\n\nThis copies the contents of that file you created to your clipboard. It’s like opening the file and copying the contents.\n\n\n\nNow we’ll save the contents of that secret file on your computer into your Github account so Github “knows” about your computer.\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, so Command-V to paste your key into the box.\n\nIt will look something like this (but the contents will be different):\n\n\n\nSaving the key\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n\n\nFrom your Terminal, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!\n\n\n\n\nIf you can’t set SSH keys, you can at least reduce the number of times you have to enter your GitHub name/password by caching your password. We’ll have to use this method for lab computers.\n\n\n\n\nWe will use the code editor Visual Studio Code, made by Microsoft. It is free. We need to install it now.\n\nInstall the code editor Visual Studio Code on your machine.\nAfter you’ve installed it, launch Visual Studio Code.\nOpen the Command Palette (View &gt; Command Palette) and type in &gt;shell command and look for the return Shell Command: Install ‘code’ command in PATH. Choose that.\n\n\n\n\nAdd code to path\n\n\nIt allows us to open files in VS Code directly from a Terminal.\n\n\n\n\n\n\nImportant\n\n\n\nWindows users have one more thing to do: We need to configure your VS Code integrated terminal to use Git Bash.\n\nGo to View &gt; Command Palette and type in &gt;Terminal: Select Default Shell and choose it.\nWhen it prompts you with choices, choose git bash.\n\n\n\n\n\n\nClose your Terminal and restart it.\nType code ./ and see it opens VS Code.\n\nHollar if it doesn’t. We need that to work before the next step.\n\n\n\n\nThis next tool gives us some feedback in our Terminal when we are using git.\n\nOpen a new Git Bash window to install the git-bash-prompt with the following command:\n\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\nThis should install the software you need to your home directory.\n\nNow we’ll open (or create) a settings file for bash:\n\ncode ~/.bash_profile\n\n\n\n\n\n\nNote\n\n\n\nIf the above command doesn’t open the file in VS Code then you didn’t set the code command in the “Code Editor” section. First quit/relaunch Terminal and try again. If that doesn’t work, go back to “Launching from the command line” and do that again.)\n\n\n\nOnce your .bash_profile opens in VS Code, copy and paste this into the bottom of the file based on your operating system. (If there is any content in the file already, leave that there.)\n\n\nmacOSWindows\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\n\n# sets shorter prompt name\nPS1='\\u:\\W\\$ '\n\n# hides zsh prompt\nexport BASH_SILENCE_DEPRECATION_WARNING=1\nIn addition to adding some commands to help you with git, we also added something to shorten your terminal prompt. We also added a command to stop asking you to change to zsh.\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\nThis tells your terminal to use the gitprompt software we installed above.\n\n\n\n\nClose and restart your Terminal program to load the new settings.\n\n\n\n\n\n\n\nIf you want to read more about git-bash-prompt, you can here. Totally optional. We’ll talk about it later.\n\n\n\n\n\n\nIf you look on the left-menu of Visual Studio code, there is a square puzzle looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\n\nIn VS Code, click on the Extensions icon.\nIn the search box, type in Live Server and find the one created by Ritwick Dey.\nClick the Install button on that page.\nDo the same for markdownlint by David Anson.\nDo the same for Nunjucks by ronnidc.\n\nThese all make Visual Studio Code more awesomer in different ways.\n\n\n\nI have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Preferences &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\n\n\n\nvs-code-setting-as-code\n\n\n\nIn the new file that opens, copy and paste the code below and replace what is there.\n\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2,\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    },\n}\n\nSave and close the file.\n\nThis sets the default text size, line wrapping, tab stops and other useful things we will need. If you find the text too big, you can change the number in the configuration.\n\n\n\nI recommend that you use Google Chrome as your browser for this class. It is what I’ll use in class and demonstrations, and it has lots of development tools built in that will come in handy.\n\n\n\nWe need to make sure everything is set correctly before moving on. So here is how to check:\nBefore doing this, open a new Terminal window:\n\nDo git config user.name and you should get a response that is your name.\nDo git config user.email and you should get back your email address.\nDo ssh -T git@github.com to test SSH keys. If you are asked about “RSA key fingerprint”, say yes. In the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.”\nDo ls -a | grep bash and you should get a list that includes at least “.bash-git-prompt” and “.bash_profile”.\nDo code ~/.bash_profile and it should open your bash_profile, which should have (at least):\n\n\nmacOSWindows\n\n\n\n\n\ngit-bash-prompt\n\n\n\n\n\n\n\ngit-bash-prompt"
  },
  {
    "objectID": "setup-part-1.html#install-git",
    "href": "setup-part-1.html#install-git",
    "title": "Setup: Part 1",
    "section": "",
    "text": "Note there are some platform differences here …\n\nmacOSWindows\n\n\nHomebrew is a “package manager”, meaning it is a program to help you install other programs that are not in Apple’s app store … usually geeky things. We’ll use Homebrew to install Git, which you will learn more about soon.\n\nInstall Homebrew. Just go to that page and copy that first command noted and then run it in your terminal and then come back here. IT WILL TAKE SOME TIME. Once it is done …\nInstall Git using this homebrew command: brew install git.\n\nDon’t install any Git GUI clients. Git just lives inside your computer and we’ll use the Terminal to control it instead of a traditional “app”.\n\n\nIf you did the “Terminal” chapters in this book then you’ve already installed Git and you can move onto the next section to configure it.\nIf you haven’t for some reason, download it from Git Downloads and install it. When asked to “Adjust your PATH environment” choose “Use Git from Git Bash only”."
  },
  {
    "objectID": "setup-part-1.html#configure-git",
    "href": "setup-part-1.html#configure-git",
    "title": "Setup: Part 1",
    "section": "",
    "text": "Here we’ll update some settings within git on your machine.\nFirst we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name in quotes instead of “Mona Lisa”:\n\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\n\nIn your Terminal do this but use your email:\n\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account.\nLastly we’ll set git to name your default branch “main” instead of “master” as this is a new standard.\n\nIn your terminal, run this:\n\ngit config --global init.defaultBranch main\nYou won’t get a reponse unless there was a problem."
  },
  {
    "objectID": "setup-part-1.html#set-up-github",
    "href": "setup-part-1.html#set-up-github",
    "title": "Setup: Part 1",
    "section": "",
    "text": "If you don’t already have a GitHub account, go to github.com and create an account.\n\n\n\n\n\n\nImportant\n\n\n\nChoose your Github username carefully and don’t make the name specific to this class. This is your personal GitHub profile FOREVER. I would also avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them."
  },
  {
    "objectID": "setup-part-1.html#saving-your-github-credentials",
    "href": "setup-part-1.html#saving-your-github-credentials",
    "title": "Setup: Part 1",
    "section": "",
    "text": "Important\n\n\n\nIf you have ever set up SSH keys before, find the instructor. (If you don’t understand that sentence, you likely haven’t.)\n\n\nWe’re going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doesn’t like sending your password around). It will seem complicated, but it’s not really.\nThese directions from from here (macOS | Windows) but try the steps for your computer listed below as they are streamlined.\n\nDuring this process, you’ll be asked to save the location of the rsa_id. Just hit return to save the default location.\nYou’ll also be asked to set a password for the file. JUST LEAVE THE PASSWORD BLANK and hit return. It will ask you a couple of times.\nAt the end of the installation, it will give a path to the rsa_id file. We might need to open this file in the next step to copy it. Ask for help at this step.\n\n\nIn your terminal, run the following command but with your email:\n\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\nWhen it prompts you about a location, JUST HIT RETURN to accept the default.\nwhen it prompts you for a passphrase, JUST HIT RETURN to leave it blank.\n\nYou should get a nice little art looking return on your terminal, eventually.\nWhat those steps did is create a file on your computer and put inside of it a bunch of random characters.\nTo “copy” the contents of this file, the command differs between macOS and Windows:\n\nmacOSWindows\n\n\n\nOnce you are through the steps above, do the following command:\n\npbcopy &lt; ~/.ssh/id_ed25519.pub\n\n\n\nOnce you are through the steps above, do the following command:\n\nclip &lt; ~/.ssh/id_ed25519.pub\n\n\n\nThis copies the contents of that file you created to your clipboard. It’s like opening the file and copying the contents."
  },
  {
    "objectID": "setup-part-1.html#saving-ssh-key-in-github",
    "href": "setup-part-1.html#saving-ssh-key-in-github",
    "title": "Setup: Part 1",
    "section": "",
    "text": "Now we’ll save the contents of that secret file on your computer into your Github account so Github “knows” about your computer.\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, so Command-V to paste your key into the box.\n\nIt will look something like this (but the contents will be different):\n\n\n\nSaving the key\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n\n\nFrom your Terminal, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!\n\n\n\n\nIf you can’t set SSH keys, you can at least reduce the number of times you have to enter your GitHub name/password by caching your password. We’ll have to use this method for lab computers."
  },
  {
    "objectID": "setup-part-1.html#text-editor",
    "href": "setup-part-1.html#text-editor",
    "title": "Setup: Part 1",
    "section": "",
    "text": "We will use the code editor Visual Studio Code, made by Microsoft. It is free. We need to install it now.\n\nInstall the code editor Visual Studio Code on your machine.\nAfter you’ve installed it, launch Visual Studio Code.\nOpen the Command Palette (View &gt; Command Palette) and type in &gt;shell command and look for the return Shell Command: Install ‘code’ command in PATH. Choose that.\n\n\n\n\nAdd code to path\n\n\nIt allows us to open files in VS Code directly from a Terminal.\n\n\n\n\n\n\nImportant\n\n\n\nWindows users have one more thing to do: We need to configure your VS Code integrated terminal to use Git Bash.\n\nGo to View &gt; Command Palette and type in &gt;Terminal: Select Default Shell and choose it.\nWhen it prompts you with choices, choose git bash.\n\n\n\n\n\n\nClose your Terminal and restart it.\nType code ./ and see it opens VS Code.\n\nHollar if it doesn’t. We need that to work before the next step."
  },
  {
    "objectID": "setup-part-1.html#installing-bash-git-prompt",
    "href": "setup-part-1.html#installing-bash-git-prompt",
    "title": "Setup: Part 1",
    "section": "",
    "text": "This next tool gives us some feedback in our Terminal when we are using git.\n\nOpen a new Git Bash window to install the git-bash-prompt with the following command:\n\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\nThis should install the software you need to your home directory.\n\nNow we’ll open (or create) a settings file for bash:\n\ncode ~/.bash_profile\n\n\n\n\n\n\nNote\n\n\n\nIf the above command doesn’t open the file in VS Code then you didn’t set the code command in the “Code Editor” section. First quit/relaunch Terminal and try again. If that doesn’t work, go back to “Launching from the command line” and do that again.)\n\n\n\nOnce your .bash_profile opens in VS Code, copy and paste this into the bottom of the file based on your operating system. (If there is any content in the file already, leave that there.)\n\n\nmacOSWindows\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\n\n# sets shorter prompt name\nPS1='\\u:\\W\\$ '\n\n# hides zsh prompt\nexport BASH_SILENCE_DEPRECATION_WARNING=1\nIn addition to adding some commands to help you with git, we also added something to shorten your terminal prompt. We also added a command to stop asking you to change to zsh.\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\nThis tells your terminal to use the gitprompt software we installed above.\n\n\n\n\nClose and restart your Terminal program to load the new settings.\n\n\n\n\n\n\n\nIf you want to read more about git-bash-prompt, you can here. Totally optional. We’ll talk about it later."
  },
  {
    "objectID": "setup-part-1.html#vs-code-extensions",
    "href": "setup-part-1.html#vs-code-extensions",
    "title": "Setup: Part 1",
    "section": "",
    "text": "If you look on the left-menu of Visual Studio code, there is a square puzzle looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\n\nIn VS Code, click on the Extensions icon.\nIn the search box, type in Live Server and find the one created by Ritwick Dey.\nClick the Install button on that page.\nDo the same for markdownlint by David Anson.\nDo the same for Nunjucks by ronnidc.\n\nThese all make Visual Studio Code more awesomer in different ways."
  },
  {
    "objectID": "setup-part-1.html#vs-code-preferences",
    "href": "setup-part-1.html#vs-code-preferences",
    "title": "Setup: Part 1",
    "section": "",
    "text": "I have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Preferences &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\n\n\n\nvs-code-setting-as-code\n\n\n\nIn the new file that opens, copy and paste the code below and replace what is there.\n\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2,\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    },\n}\n\nSave and close the file.\n\nThis sets the default text size, line wrapping, tab stops and other useful things we will need. If you find the text too big, you can change the number in the configuration."
  },
  {
    "objectID": "setup-part-1.html#use-google-chrome",
    "href": "setup-part-1.html#use-google-chrome",
    "title": "Setup: Part 1",
    "section": "",
    "text": "I recommend that you use Google Chrome as your browser for this class. It is what I’ll use in class and demonstrations, and it has lots of development tools built in that will come in handy."
  },
  {
    "objectID": "setup-part-1.html#testing-part-1-setup",
    "href": "setup-part-1.html#testing-part-1-setup",
    "title": "Setup: Part 1",
    "section": "",
    "text": "We need to make sure everything is set correctly before moving on. So here is how to check:\nBefore doing this, open a new Terminal window:\n\nDo git config user.name and you should get a response that is your name.\nDo git config user.email and you should get back your email address.\nDo ssh -T git@github.com to test SSH keys. If you are asked about “RSA key fingerprint”, say yes. In the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.”\nDo ls -a | grep bash and you should get a list that includes at least “.bash-git-prompt” and “.bash_profile”.\nDo code ~/.bash_profile and it should open your bash_profile, which should have (at least):\n\n\nmacOSWindows\n\n\n\n\n\ngit-bash-prompt\n\n\n\n\n\n\n\ngit-bash-prompt"
  }
]