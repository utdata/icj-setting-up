[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ICJ Setting Up",
    "section": "",
    "text": "Setting up your computer for ICJ\nFind the published version of this material here: ICJ Setting Up\n\nThis site outlines how to set up a computer for Intro to Coding for Journalists, a class in the School of Journalism and Media at the University of Texas at Austin. If you are new to coding, I suggest you begin with the Getting Started chapter there.\nBoth macOS and Windows platforms are covered with these instructions. Chromebooks and tablets are not supported for this class.\nIf you are using a UT lab computer, get with your instructor.\n\nSetup part 1 we do at the beginning of the semester\nSetup part 2 we do in the middle of the semester\n\n\n\nAbout the author\nChristian McDonald\nAssociate Professor of Practice\nSchool of Journalism and Media\nMoody College of Communication\nUniversity of Texas at Austin\nI was a career journalist who most recently served as data and projects editor at the Austin American-Statesman before joining the journalism school full-time in fall 2018. I had been teaching data-related courses as a lecturer since 2013.\nI also serve as the innovation director of the Dallas Morning News Journalism Innovation Endowment.\n\nUT Data Github: utdata\nTwitter: crit | Mastodon crit | Bluesky: @crit\nEmail: christian.mcdonald@utexas.edu\n\nSpecial thanks to Michael Plunkett for helping figure out Google Cloud CLI.\n\n\nLicense\n\n\n\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Let’s just say this is free on the internet. I don’t make any money from it and you shouldn’t either."
  },
  {
    "objectID": "setup-part-1.html#install-git",
    "href": "setup-part-1.html#install-git",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.1 Install Git",
    "text": "2.1 Install Git\nNote there are some platform differences here …\n\nmacOSWindows\n\n\nHomebrew is a “package manager”, meaning it is a program to help you install other programs that are not in Apple’s app store … usually geeky things. We’ll use Homebrew to install Git, which you will learn more about soon.\n\nInstall Homebrew. Just go to that page and copy that first command noted and then run it in your terminal and then come back here. IT WILL TAKE SOME TIME. Once it is done …\nInstall Git using this homebrew command: brew install git.\n\nDon’t install any Git GUI clients. Git just lives inside your computer and we’ll use the Terminal to control it instead of a traditional “app”.\n\n\nIf you did the “Terminal” chapters in this book then you’ve already installed Git and you can move onto the next section to configure it.\nIf you haven’t for some reason, download it from Git Downloads and install it. When asked to “Adjust your PATH environment” choose “Use Git from Git Bash only”."
  },
  {
    "objectID": "setup-part-1.html#configure-git",
    "href": "setup-part-1.html#configure-git",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.2 Configure git",
    "text": "2.2 Configure git\nHere we’ll update some settings within git on your machine.\nFirst we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name in quotes instead of “Mona Lisa”:\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\nIn your Terminal do this but use your email:\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account.\nLastly we’ll set git to name your default branch “main” instead of “master” as this is a new standard.\nIn your terminal, run this:\ngit config --global init.defaultBranch main\nYou won’t get a response unless there was a problem."
  },
  {
    "objectID": "setup-part-1.html#set-up-github",
    "href": "setup-part-1.html#set-up-github",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.3 Set up GitHub",
    "text": "2.3 Set up GitHub\nIf you don’t already have a GitHub account, go to github.com and create an account.\n\n\n\n\n\n\nImportant\n\n\n\nChoose your Github username carefully and don’t make the name specific to this class. This is your personal GitHub profile FOREVER. I would also avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them."
  },
  {
    "objectID": "setup-part-1.html#saving-your-github-credentials",
    "href": "setup-part-1.html#saving-your-github-credentials",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.4 Saving your GitHub credentials",
    "text": "2.4 Saving your GitHub credentials\n\n\n\n\n\n\nImportant\n\n\n\nIf you have ever set up SSH keys before, find the instructor. (If you don’t understand that sentence, you likely haven’t.)\n\n\nWe’re going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doesn’t like sending your password around). It will seem complicated, but it’s not really.\nThese directions from from here (macOS | Windows) but try the steps for your computer listed below as they are streamlined.\n\nDuring this process, you’ll be asked to save the location of the rsa_id. Just hit return to save the default location.\nYou’ll also be asked to set a password for the file. JUST LEAVE THE PASSWORD BLANK and hit return. It will ask you a couple of times.\nAt the end of the installation, it will give a path to the rsa_id file. We might need to open this file in the next step to copy it. Ask for help at this step.\n\n\nIn your terminal, run the following command but with your email:\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nWhen it prompts you about a location, JUST HIT RETURN to accept the default.\nwhen it prompts you for a passphrase, JUST HIT RETURN to leave it blank.\n\nYou should get a nice little art looking return on your terminal, eventually.\nWhat those steps did is create a file on your computer and put inside of it a bunch of random characters.\nTo “copy” the contents of this file, the command differs between macOS and Windows:\n\nmacOSWindows\n\n\n\nOnce you are through the steps above, do the following command:\n\npbcopy &lt; ~/.ssh/id_ed25519.pub\n\n\n\nOnce you are through the steps above, do the following command:\n\nclip &lt; ~/.ssh/id_ed25519.pub\n\n\n\nThis copies the contents of that file you created to your clipboard. It’s like opening the file and copying the contents."
  },
  {
    "objectID": "setup-part-1.html#saving-ssh-key-in-github",
    "href": "setup-part-1.html#saving-ssh-key-in-github",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.5 Saving SSH key in Github",
    "text": "2.5 Saving SSH key in Github\nNow we’ll save the contents of that secret file on your computer into your Github account so Github “knows” about your computer.\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, so Command-V to paste your key into the box.\n\nIt will look something like this (but the contents will be different):\n\n\n\nSaving the key\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n2.5.1 Test Github connection\n\nFrom your Terminal, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!\n\n\n\n2.5.2 Alternative to SSH keys\nIf you can’t set SSH keys, you can at least reduce the number of times you have to enter your GitHub name/password by caching your password. We’ll have to use this method for lab computers."
  },
  {
    "objectID": "setup-part-1.html#text-editor",
    "href": "setup-part-1.html#text-editor",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.6 Text editor",
    "text": "2.6 Text editor\nWe will use the code editor Visual Studio Code, made by Microsoft. It is free. We need to install it now.\n\nInstall the code editor Visual Studio Code on your machine.\nAfter you’ve installed it, launch Visual Studio Code.\nOpen the Command Palette (View &gt; Command Palette) and type in &gt;shell command and look for the return Shell Command: Install ‘code’ command in PATH. Choose that.\n\n\n\n\nAdd code to path\n\n\nIt allows us to open files in VS Code directly from a Terminal.\n\n\n\n\n\n\nImportant\n\n\n\nWindows users have one more thing to do: We need to configure your VS Code integrated terminal to use Git Bash.\n\nGo to View &gt; Command Palette and type in &gt;Terminal: Select Default Shell and choose it.\nWhen it prompts you with choices, choose git bash.\n\n\n\n\n2.6.1 Test the path\n\nClose your Terminal and restart it.\nType code ./ and see it opens VS Code.\n\nHollar if it doesn’t. We need that to work before the next step."
  },
  {
    "objectID": "setup-part-1.html#installing-bash-git-prompt",
    "href": "setup-part-1.html#installing-bash-git-prompt",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.7 Installing bash-git-prompt",
    "text": "2.7 Installing bash-git-prompt\nThis next tool gives us some feedback in our Terminal when we are using git.\n\nOpen a new Git Bash window to install the git-bash-prompt with the following command:\n\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\nThis should install the software you need to your home directory.\n\nNow we’ll open (or create) a settings file for bash:\n\ncode ~/.bash_profile\n\n\n\n\n\n\nNote\n\n\n\nIf the above command doesn’t open the file in VS Code then you didn’t set the code command in the “Code Editor” section. First quit/relaunch Terminal and try again. If that doesn’t work, go back to “Launching from the command line” and do that again.)\n\n\n\nOnce your .bash_profile opens in VS Code, copy and paste this into the bottom of the file based on your operating system. (If there is any content in the file already, leave that there.)\n\n\nmacOSWindows\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\n\n# sets shorter prompt name\nPS1='\\u:\\W\\$ '\n\n# hides zsh prompt\nexport BASH_SILENCE_DEPRECATION_WARNING=1\nIn addition to adding some commands to help you with git, we also added something to shorten your terminal prompt. We also added a command to stop asking you to change to zsh.\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\nThis tells your terminal to use the gitprompt software we installed above.\n\n\n\n\nClose and restart your Terminal program to load the new settings.\n\n\n\n\n\n\n\nIf you want to read more about git-bash-prompt, you can here. Totally optional. We’ll talk about it later."
  },
  {
    "objectID": "setup-part-1.html#vs-code-extensions",
    "href": "setup-part-1.html#vs-code-extensions",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.8 VS Code extensions",
    "text": "2.8 VS Code extensions\nIf you look on the left-menu of Visual Studio code, there is a square puzzle looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\n\nIn VS Code, click on the Extensions icon.\nIn the search box, type in Live Server and find the one created by Ritwick Dey.\nClick the Install button on that page.\nDo the same for markdownlint by David Anson.\nDo the same for Nunjucks by ronnidc.\nDo the same for Path Intellisense by Christian Kohler.\n\nThese all make Visual Studio Code more awesomer in different ways."
  },
  {
    "objectID": "setup-part-1.html#vs-code-preferences",
    "href": "setup-part-1.html#vs-code-preferences",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.9 VS Code preferences",
    "text": "2.9 VS Code preferences\nI have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Preferences &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\n\n\n\nvs-code-setting-as-code\n\n\n\nIn the new file that opens, copy and paste the code below and replace what is there.\n\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2,\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    },\n}\n\nSave and close the file.\n\nThis sets the default text size, line wrapping, tab stops and other useful things we will need. If you find the text too big, you can change the number in the configuration."
  },
  {
    "objectID": "setup-part-1.html#use-google-chrome",
    "href": "setup-part-1.html#use-google-chrome",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.10 Use Google Chrome",
    "text": "2.10 Use Google Chrome\nI recommend that you use Google Chrome as your browser for this class. It is what I’ll use in class and demonstrations, and it has lots of development tools built in that will come in handy."
  },
  {
    "objectID": "setup-part-1.html#testing-part-1-setup",
    "href": "setup-part-1.html#testing-part-1-setup",
    "title": "2  Part 1: Git, VS Code",
    "section": "2.11 Testing Part 1 setup",
    "text": "2.11 Testing Part 1 setup\nWe need to make sure everything is set correctly before moving on. So here is how to check:\nBefore doing this, open a new Terminal window:\n\nDo git config user.name and you should get a response that is your name.\nDo git config user.email and you should get back your email address.\nDo ssh -T git@github.com to test SSH keys. If you are asked about “RSA key fingerprint”, say yes. In the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.”\nDo ls -a | grep bash and you should get a list that includes at least “.bash-git-prompt” and “.bash_profile”.\nDo code ~/.bash_profile and it should open your bash_profile, which should have (at least):\n\n\nmacOSWindows\n\n\n\n\n\ngit-bash-prompt\n\n\n\n\n\n\n\ngit-bash-prompt"
  },
  {
    "objectID": "setup-part-2.html#installing-node",
    "href": "setup-part-2.html#installing-node",
    "title": "3  Part 2: Node, gcloud",
    "section": "3.1 Installing Node",
    "text": "3.1 Installing Node\nNode is a Javascript runtime environment we will use to build news applications. Installation is different for Mac vs Windows.\n\nMacWindows\n\n\nWe need to make sure you have xcode tools first.\n\n3.1.0.1 Checking xcode\n\nRun this in your Terminal:\nxcode-select -p\n\nYou should get a path in return. Something like “/Library/Developer/CommandLineTools”.\nIf you don’t AND ONLY IF YOU DON’T, you need to install it.\n\n\n3.1.0.2 Installing xcode-select (only if needed)\n\nIn your Terminal run this:\nxcode-select --install\nA software update popup window will appear that asks: “The xcode-select command requires the command line developer tools. Would you like to install the tools now?” choose to confirm this by clicking Install, then agree to the Terms of Service when requested (feel free to read them thoroughly, we’ll be here).\n\nIt can take a long while to download and install. If you get an error on this install, let me know as I have a copy I can give you.\n\n\n3.1.0.3 NVM\nWe will use NVM to install Node.js. Again, follow the prompts and you should be fine.\n\nGo to this page and copy the first code chunk that starts with curl.\nPaste that into your Terminal and run it.\nAfter it is done, quit Terminal and relaunch it.\nTest: After relaunching a terminal do nvm list to make sure you don’t get an error.\n\n\n\n3.1.0.4 Node\nUse NVM to install Node.\n\nInstall “v16.18.0” of Node:\nnvm install 16.18.0\nTest: Do node -v to make sure it worked. It should give you back “v16.18.0”.\n\n\n\n\nMicrosoft recommends using nvm-windows to install node, so let’s go with that.\n\nFollow these directions to install nvm-windows BUT READ THE NEXT STEPS FIRST.\n\nWhen they say Launch Powershell, you should use Git Bash instead.\nWhen it gets to installing Node.js DON’T DO nvm install latest. Instead, use this command:\nnvm install v16.18.0\n\nTo make sure it worked, in Git Bash do:\nnode --version\n\nYou should get a response that says you are using v16.18.0.\n\n\n\n\n\n\n3.1.1 Update npm\nNPM is a package repository. We need to update it.\n\nTo update npm, run this:\nnpm install -g npm\nTest: Do npm -v and it should return with a version number."
  },
  {
    "objectID": "setup-part-2.html#icj-project-setup",
    "href": "setup-part-2.html#icj-project-setup",
    "title": "3  Part 2: Node, gcloud",
    "section": "3.2 ICJ project setup",
    "text": "3.2 ICJ project setup\nThere are some additional global npm tools that we need to install for our tour of NodeJS-based build tools.\n\nRun this:\nnpm install -g gulp degit\n\nThese are for the task manager Gulp and a scaffolding tool Degit."
  },
  {
    "objectID": "setup-part-2.html#google-drive-authentication",
    "href": "setup-part-2.html#google-drive-authentication",
    "title": "3  Part 2: Node, gcloud",
    "section": "3.3 Google Drive authentication",
    "text": "3.3 Google Drive authentication\nThere is a point in class when your computer will need access to your Google Drive account. Much like ssh keys, we’ll need specific credentials that work only for you. We will use the Google Cloud Project’s command line interface tool to do this. Otherwise known as the gcloud CLI.\n\nIMPORTANT: You must have and use a PERSONAL Gmail/Google account for this process. Your UTMail Google account will not work.\n\n\n3.3.1 Install Google Cloud tools\nAgain, differences between macOS and Windows\n\nmacOSWindows\n\n\nTo make the installation of packages simple, we are going to use the MacOS package manager brew to install some Google Cloud tools. You should already have brew installed from earlier in the semester.\n\nRun the following to install the Google Cloud SDK\nbrew install --cask google-cloud-sdk\nTest: Run gcloud --version and make sure a version number is returned.\n\n\n\n\nFollow the instructions found in this link to download and install the gcloud CLI tool.\nTest: Once the installation has finished, run the command gcloud --version in your terminal, and you should get some output similar to this: Google Cloud SDK 428.0.0\n\n\n\n\n\n\n3.3.2 Authenticate our session\nWe are now going to authenticate our Google credentials on our local machine. Make sure to select your personal gmail account for this part. If you use your utexas.edu email, you won’t have permission to do what we need to do.\n\nIn a web browser, make sure you are logged into your PERSONAL Google account.\nIn a Terminal, use the following command:\ngcloud auth login --brief --enable-gdrive-access\n\nThis will open a browser where it will show you all of your available Google names. After you select your personal gmail account, you will be sent to a permissions screen that will look something like this:\n\n\n\ngcloud auth\n\n\nClick Allow and you will have given your computer access to manage files on your Google Drive and in the Google Cloud Project.\n\n\n3.3.3 Create and configure project\nAgain, be in your personal Google account as you will have to authenticate again.\nWe are going to run through several gcloud commands to set you computer to access Google Docs and Google sheets through programing. It’s a lot of ecsoteric steps and things could go wrong at each step. I don’t outline the output you get in return, but there can be a little or a lot.\nYou may be asked some questions during installation. You should be able to answer with the default answer (usually capitalized). If you try these steps more than once you might be errors that a project exists. Ask for help.\nJust keep an eye out for ERROR or can't find [whatever] and hollar if that happens.\nLaunch a fresh Terminal for this.\n\n\n\n\n\n\nImportant\n\n\n\nAfter you run the first command below, take note of the last line of the return. Does it say Updated property [core/project] to [icj-project]? If not, it probably added random letters and numbers at the end of icj-project and you might need that string later. PLEASE ASK FOR HELP IF SO.\n\n\n\nDo this command to create the project:\ngcloud projects create icj-project --set-as-default --name=\"ICJ Project\"\nDo this to log in and set your project as a default:\ngcloud auth application-default login\nNext, we’ll create a Google service account:\ngcloud iam service-accounts create generic-service-account\nNext we need to bind the service account to our project with the command below. You should get a reply that reports bindings for roles of editor and owner. (This is where we might need to make adjustments if your project id has random letters/numbers.)\ngcloud projects add-iam-policy-binding icj-project --member='serviceAccount:generic-service-account@icj-project.iam.gserviceaccount.com' --role='roles/editor'\nThen we enable the Google Docs and Sheets API for your project:\ngcloud services enable docs.googleapis.com sheets.googleapis.com\nNow we’ll create a service account authorization key. This is similar to ssh key above, but for Google:\ngcloud iam service-accounts keys create \"$HOME/.config/gcloud/service_account_key.json\" \\\n    --iam-account=generic-service-account@icj-project.iam.gserviceaccount.com\nThen add the key to your .bash_profile with this commaned:\necho 'export GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/.config/gcloud/service_account_key.json\"' &gt;&gt;~/.bash_profile\nSync your terminal with the updated bash profile:\nsource ~/.bash_profile\n\nYes, that was a lot. Hopefuly it worked. We’re about to find out."
  },
  {
    "objectID": "setup-part-2.html#test-these-settings",
    "href": "setup-part-2.html#test-these-settings",
    "title": "3  Part 2: Node, gcloud",
    "section": "3.4 Test these settings",
    "text": "3.4 Test these settings\n\nCreate a folder in your icj folder called yourname-test.\nOpen that folder in Visual Studio Code.\nOpen a VS Code Terminal and run:\n\ndegit utdata/icj-google-fetch-test#main\nYou should get this in return:\n&gt; cloned utdata/icj-google-fetch-test#main\nAnd it will download a bunch of files into your folder.\n\nRun npm ci. This will also download a bunch of files. It might take a couple of minutes to run.\nRun gulp fetch.\n\nIf everything works, you should have a return like this:\n$ gulp fetch\n[14:38:53] Using gulpfile ~/Documents/icj/icj-fetch-test/gulpfile.js\n[14:38:53] Starting 'fetch'...\n[14:38:53] Finished 'fetch' after 8.61 ms\nDownloaded `library` (1RgMhjtkXlbbf9uzSzy_xPRKwxcVZIZqVytgM_JoU4E4)\nDownloaded `bookstores` (1gDwO-32cgpBDn_0niV0iu6TqQTaRDr4nmSqnT53magY)\nYour path might differ for “Using gulpfile”, but what you are looking for is that two files were downloaded, one called library and one called bookstores.\n\nYou should be done!"
  },
  {
    "objectID": "codespaces.html#install-gulp",
    "href": "codespaces.html#install-gulp",
    "title": "Appendix A — Codespaces",
    "section": "A.1 Install gulp",
    "text": "A.1 Install gulp\nOnce you launch a codespace it will recognize you are in a Node environment but you still need to install some packages the first time you launch it:\n\nOnce the container is up and running, do npm install -g gulp to install gulp.\nRun npm ci to do a clean install on all the other packages in the project.\n\nIf you come back to an existing Codespace you should not have to run those again."
  },
  {
    "objectID": "codespaces.html#google-auth-access",
    "href": "codespaces.html#google-auth-access",
    "title": "Appendix A — Codespaces",
    "section": "A.2 Google auth access",
    "text": "A.2 Google auth access\nThere is one gulp command that will not work in Codespaces unless you jump through some extra hoops.\ngulp fetch is the command that downloads Google Docs and Sheets documents as JSON, as outlined in project.config.json. The process expects to find an authorization file on your own computer that we set up in icj-setting-up Part 2, but that file doesn’t exist on the Codespaces virtual machine.\nYou’ll need to set up two environment variables to make it work.\n\nNOTE: It is absolutely imperative that you DO NOT commit the contents of service_account_key.json to your branch at all. If someone else were able to see the contents of that file, they could execute any action that service account has in its abilities. Since service_account_key.json is in the .gitignore file, you should not be able to check it in, but it is important to remember that for the sake of transparency.\n\nWe will be following the process shown here\nAs you follow those steps you’ll need the information below.\n\nA.2.1 Credential path\n\nThe “Name” of the secret will be GOOGLE_CREDENTIALS.\nThe “Value” of the secret will be: $HOME/.config/gcloud/service_account_key.json\n\n\n\nA.2.2 Credential contents\n\nThe “Name” of the secret will be GOOGLE_APPLICATION_CREDENTIALS\nFor the “Value” of the secret you need to copy the contents of a file on your local machine. Follow the steps below:\n\n\nRun this command on your local machine, which will copy needed the file to your clipboard:\npbcopy &lt; $HOME/.config/gcloud/service_account_key.json\nReturn to your web browser and for the “Value” do Cmd-v to paste the contents of your clipboard."
  },
  {
    "objectID": "codespaces.html#load-the-secrets",
    "href": "codespaces.html#load-the-secrets",
    "title": "Appendix A — Codespaces",
    "section": "A.3 Load the secrets",
    "text": "A.3 Load the secrets\nWhen you open your Codespace, you will run the following command.\nnpm run codespace-google-auth\nAfter doing that, you should be able to run gulp fetch to update the data JSON files."
  },
  {
    "objectID": "gcloud.html",
    "href": "gcloud.html",
    "title": "Appendix B — gcloud cli",
    "section": "",
    "text": "We end up using the Google Cloud SDK to set up authorization to allow programming access to Google Docs and Sheets. Some useful commands:\n\ngcloud auth list tells you which account you are in and how to set a new active account.\ngcloud auth revoke logs you out of your active account. --all flag logs you out of all accounts, I think.\ngcloud projects list shows all the projects for the account.\ngcloud config get-value project shows you which project you are in.\ngcloud config set project [project-id] but replace [project-id] with the project name.\n\nSee Setting Up Part 2 for commands to set up a project and enable the APIs."
  },
  {
    "objectID": "vscode-goodies.html#extensions",
    "href": "vscode-goodies.html#extensions",
    "title": "Appendix C — VS Code Goodies",
    "section": "C.1 Extensions",
    "text": "C.1 Extensions\nIf you look on the left-menu, there is a square looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\nSome of those that I have used (and I’m finding more every day):\n\nNunjucks Templates: gives you syntax highlighting for Nunjucks pages. Needs a little configuration to work with our First Graphics App pages. See Preferences below.\nmarkdownlint: tells you when your Markdown syntax is incorrect.\n\n\nC.1.1 Optional\n\nExcel Viewer: is something to help preview csv files. Not essential, but helpful when working with data."
  },
  {
    "objectID": "vscode-goodies.html#preferences",
    "href": "vscode-goodies.html#preferences",
    "title": "Appendix C — VS Code Goodies",
    "section": "C.2 Preferences",
    "text": "C.2 Preferences\nI have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Settings &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\n\n\n\nvs-code-setting-as-code\n\n\n\nIn the new file that opens, copy and paste the code below and replace what is there.\nSave and close the file.\n\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    }\n}\nIf you look through the JSON, you might be able to figure out what some of these do. This isn’t a full description of them, but …\n\nI set default size of text in the editor. I’m old, so I make it bigger so it’s easier to read. If that is too big, you can change it later.\nI set make the text in the terminal window bigger. Still old.\nI set the editor to show spaces that aren’t between words. This makes indented code easier to see.\nI set the tab character to insert two spaces. This is a common coding default.\nI remove the minimap thing that shows by default at the right side of an open file. I find it more of a hassle than useful.\n\nThere are more. They will be helpful."
  }
]