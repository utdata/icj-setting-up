[
  {
    "objectID": "windows-02.html",
    "href": "windows-02.html",
    "title": "Setting up for Node",
    "section": "",
    "text": "Hold off on this until we get to this part later in the semester.\nIf we have reached that point, then fire up Git Bash.\n(If you ever see reference to “Terminal”, I mean Git Bash for Windows users.)\n\n\nNode is a Javascript runtime environment we will use to build news applications. This is where things get kinda dicey with my (lack of) Windows experience. Microsoft recommends using nvm-windows to install node, so let’s go with that.\n\nFollow these directions to install nvm-windows BUT READ THE NEXT STEPS FIRST.\n\nWhen they say Launch Powershell, you should use Git Bash instead.\nWhen it gets to installing Node.js DON’T DO nvm install latest. Instead, use this command:\nnvm install v16.18.0\n\nTo make sure it worked, in Git Bash do:\nnode --version\n\nYou should get a response that says you are using v16.18.0.\n\nNow lets update npm:\nnpm install -g npm\n\n\n\n\nThere are some additional global npm tools that we need to install for our tour of NodeJS-based build tools.\n\nRun the following in your Git Bash:\n\nnpm install -g gulp degit\nThese are for the task manager Gulp and a scaffolding tool Degit.\n\n\n\nThere is a point in class when your computer will need access to your Google Drive account. Much like ssh keys, we’ll need specific credentials that work only for you. We will use the Google Cloud Project’s command line interface tool to do this. Otherwise known as the gcloud CLI.\n\nIMPORTANT: You must have and use a PERSONAL Gmail/Google account for this process. Your UTMail Google account will not work.\n\n\n\n\nFollow the instructions found in this link to download and install the gcloud CLI tool.\n\nOnce the installation has finished, run the command gcloud --version in your terminal, and you should get some output similar to this: Google Cloud SDK 428.0.0\n\n\n\n\n\nWe are now going to authenticate our Google credentials on our local machine. Make sure to select your personal gmail account for this part. If you use your utexas.edu email, you won’t have permission to do what we need to do.\n\nIn a web browser, make sure you are logged into your PERSONAL Google account.\nIn a Terminal, use the following command:\ngcloud auth login --brief --enable-gdrive-access\n\nThis will open a browser where it will show you all of your available Google names. After you select your personal gmail account, you will be sent to a permissions screen that will look something like this:\n\n\n\ngcloud auth\n\n\nClick Allow and you will have given your computer access to manage files on your Google Drive and in the Google Cloud Project.\n\n\n\nAgain, be in your personal Google account as you will have to authenticate again.\nWe are going to run through several gcloud commands to set you computer to access Google Docs and Google sheets through programing. It’s a lot of ecsoteric steps and things could go wrong at each step. I don’t outline the output you get in return, but there can be a little or a lot.\nYou may be asked some questions during installation. You should be able to answer with the default answer (usually capitalized). If you try these steps more than once you might be errors that a project exists. Ask for help.\nJust keep an eye out for ERROR or can't find [whatever] and hollar if that happens.\nLaunch a fresh Terminal for this.\n\nAfter you run the first command below, take note of the last line of the return. Does it say Updated property [core/project] to [icj-project]? If not, it probably added random letters and numbers at the end of icj-project and you might need that string later. PLEASE ASK FOR HELP IF SO.\n\n\nDo this command to create the project:\ngcloud projects create icj-project --set-as-default --name=\"ICJ Project\"\nDo this to log in and set your project as a default:\ngcloud auth application-default login\nNext, we’ll create a Google service account:\ngcloud iam service-accounts create generic-service-account\nNext we need to bind the service account to our project with the command below. You should get a reply that reports bindings for roles of editor and owner. (This is where we might need to make adjustments if your project id has random letters/numbers.)\ngcloud projects add-iam-policy-binding icj-project --member='serviceAccount:generic-service-account@icj-project.iam.gserviceaccount.com' --role='roles/editor'\nThen we enable the Google Docs and Sheets API for your project:\ngcloud services enable docs.googleapis.com sheets.googleapis.com\nNow we’ll create a service account authorization key. This is similar to ssh key above, but for Google:\ngcloud iam service-accounts keys create \"$HOME/.config/gcloud/service_account_key.json\" \\\n    --iam-account=generic-service-account@icj-project.iam.gserviceaccount.com\nThen add the key to your .bash_profile with this commaned:\necho 'export GOOGLE_APPLICATION_CREDENTIALS=\"$APPDATA\\gcloud\\service_account_key.json\"' &gt;&gt;~\\.bash_profile\nSync your terminal with the updated bash profile:\nsource ~/.bash_profile\n\nYes, that was a lot. Hopefuly it worked. We’re about to find out.\n\n\n\n\n\nCreate a folder in your icj folder called yourname-test.\nOpen that folder in Visual Studio Code.\nOpen a VS Code Terminal and run:\n\ndegit utdata/icj-google-fetch-test#main\nYou should get this in return:\n&gt; cloned utdata/icj-google-fetch-test#main\nAnd it will download a bunch of files into your folder.\n\nRun npm ci. This will also download a bunch of files. It might take a couple of minutes to run.\nRun gulp fetch.\n\nIf everything works, you should have a return like this:\n$ gulp fetch\n[14:38:53] Using gulpfile ~/Documents/icj/icj-fetch-test/gulpfile.js\n[14:38:53] Starting 'fetch'...\n[14:38:53] Finished 'fetch' after 8.61 ms\nDownloaded `library` (1RgMhjtkXlbbf9uzSzy_xPRKwxcVZIZqVytgM_JoU4E4)\nDownloaded `bookstores` (1gDwO-32cgpBDn_0niV0iu6TqQTaRDr4nmSqnT53magY)\nYour path might differ for “Using gulpfile”, but what you are looking for is that two files were downloaded, one called library and one called bookstores.\n\nYou should be done!"
  },
  {
    "objectID": "windows-02.html#node.js",
    "href": "windows-02.html#node.js",
    "title": "Setting up for Node",
    "section": "",
    "text": "Node is a Javascript runtime environment we will use to build news applications. This is where things get kinda dicey with my (lack of) Windows experience. Microsoft recommends using nvm-windows to install node, so let’s go with that.\n\nFollow these directions to install nvm-windows BUT READ THE NEXT STEPS FIRST.\n\nWhen they say Launch Powershell, you should use Git Bash instead.\nWhen it gets to installing Node.js DON’T DO nvm install latest. Instead, use this command:\nnvm install v16.18.0\n\nTo make sure it worked, in Git Bash do:\nnode --version\n\nYou should get a response that says you are using v16.18.0.\n\nNow lets update npm:\nnpm install -g npm"
  },
  {
    "objectID": "windows-02.html#icj-template-setup",
    "href": "windows-02.html#icj-template-setup",
    "title": "Setting up for Node",
    "section": "",
    "text": "There are some additional global npm tools that we need to install for our tour of NodeJS-based build tools.\n\nRun the following in your Git Bash:\n\nnpm install -g gulp degit\nThese are for the task manager Gulp and a scaffolding tool Degit."
  },
  {
    "objectID": "windows-02.html#google-drive-authentication",
    "href": "windows-02.html#google-drive-authentication",
    "title": "Setting up for Node",
    "section": "",
    "text": "There is a point in class when your computer will need access to your Google Drive account. Much like ssh keys, we’ll need specific credentials that work only for you. We will use the Google Cloud Project’s command line interface tool to do this. Otherwise known as the gcloud CLI.\n\nIMPORTANT: You must have and use a PERSONAL Gmail/Google account for this process. Your UTMail Google account will not work.\n\n\n\n\nFollow the instructions found in this link to download and install the gcloud CLI tool.\n\nOnce the installation has finished, run the command gcloud --version in your terminal, and you should get some output similar to this: Google Cloud SDK 428.0.0\n\n\n\n\n\nWe are now going to authenticate our Google credentials on our local machine. Make sure to select your personal gmail account for this part. If you use your utexas.edu email, you won’t have permission to do what we need to do.\n\nIn a web browser, make sure you are logged into your PERSONAL Google account.\nIn a Terminal, use the following command:\ngcloud auth login --brief --enable-gdrive-access\n\nThis will open a browser where it will show you all of your available Google names. After you select your personal gmail account, you will be sent to a permissions screen that will look something like this:\n\n\n\ngcloud auth\n\n\nClick Allow and you will have given your computer access to manage files on your Google Drive and in the Google Cloud Project.\n\n\n\nAgain, be in your personal Google account as you will have to authenticate again.\nWe are going to run through several gcloud commands to set you computer to access Google Docs and Google sheets through programing. It’s a lot of ecsoteric steps and things could go wrong at each step. I don’t outline the output you get in return, but there can be a little or a lot.\nYou may be asked some questions during installation. You should be able to answer with the default answer (usually capitalized). If you try these steps more than once you might be errors that a project exists. Ask for help.\nJust keep an eye out for ERROR or can't find [whatever] and hollar if that happens.\nLaunch a fresh Terminal for this.\n\nAfter you run the first command below, take note of the last line of the return. Does it say Updated property [core/project] to [icj-project]? If not, it probably added random letters and numbers at the end of icj-project and you might need that string later. PLEASE ASK FOR HELP IF SO.\n\n\nDo this command to create the project:\ngcloud projects create icj-project --set-as-default --name=\"ICJ Project\"\nDo this to log in and set your project as a default:\ngcloud auth application-default login\nNext, we’ll create a Google service account:\ngcloud iam service-accounts create generic-service-account\nNext we need to bind the service account to our project with the command below. You should get a reply that reports bindings for roles of editor and owner. (This is where we might need to make adjustments if your project id has random letters/numbers.)\ngcloud projects add-iam-policy-binding icj-project --member='serviceAccount:generic-service-account@icj-project.iam.gserviceaccount.com' --role='roles/editor'\nThen we enable the Google Docs and Sheets API for your project:\ngcloud services enable docs.googleapis.com sheets.googleapis.com\nNow we’ll create a service account authorization key. This is similar to ssh key above, but for Google:\ngcloud iam service-accounts keys create \"$HOME/.config/gcloud/service_account_key.json\" \\\n    --iam-account=generic-service-account@icj-project.iam.gserviceaccount.com\nThen add the key to your .bash_profile with this commaned:\necho 'export GOOGLE_APPLICATION_CREDENTIALS=\"$APPDATA\\gcloud\\service_account_key.json\"' &gt;&gt;~\\.bash_profile\nSync your terminal with the updated bash profile:\nsource ~/.bash_profile\n\nYes, that was a lot. Hopefuly it worked. We’re about to find out."
  },
  {
    "objectID": "windows-02.html#test-these-settings",
    "href": "windows-02.html#test-these-settings",
    "title": "Setting up for Node",
    "section": "",
    "text": "Create a folder in your icj folder called yourname-test.\nOpen that folder in Visual Studio Code.\nOpen a VS Code Terminal and run:\n\ndegit utdata/icj-google-fetch-test#main\nYou should get this in return:\n&gt; cloned utdata/icj-google-fetch-test#main\nAnd it will download a bunch of files into your folder.\n\nRun npm ci. This will also download a bunch of files. It might take a couple of minutes to run.\nRun gulp fetch.\n\nIf everything works, you should have a return like this:\n$ gulp fetch\n[14:38:53] Using gulpfile ~/Documents/icj/icj-fetch-test/gulpfile.js\n[14:38:53] Starting 'fetch'...\n[14:38:53] Finished 'fetch' after 8.61 ms\nDownloaded `library` (1RgMhjtkXlbbf9uzSzy_xPRKwxcVZIZqVytgM_JoU4E4)\nDownloaded `bookstores` (1gDwO-32cgpBDn_0niV0iu6TqQTaRDr4nmSqnT53magY)\nYour path might differ for “Using gulpfile”, but what you are looking for is that two files were downloaded, one called library and one called bookstores.\n\nYou should be done!"
  },
  {
    "objectID": "gcloud.html",
    "href": "gcloud.html",
    "title": "Using gcloud cli",
    "section": "",
    "text": "Using gcloud cli\nWe end up using the Google Cloud SDK to set up authorization to allow programming access to Google Docs and Sheets. Some useful commands:\n\ngcloud auth list tells you which account you are in and how to set a new active account.\ngcloud auth revoke logs you out of your active account. --all flag logs you out of all accounts, I think.\ngcloud projects list shows all the projects for the account.\ngcloud config get-value project shows you which project you are in.\ngcloud config set project [project-id] but replace [project-id] with the project name.\n\nSee Setting Up Part 2 for commands to set up a project and enable the APIs."
  },
  {
    "objectID": "ut-lab-short.html",
    "href": "ut-lab-short.html",
    "title": "Starting up a UT Lab computer",
    "section": "",
    "text": "This WAS for a particular use case in Fall 2020.\n\nLab machines could get wiped regularly, so you might have to reset everything. You definitely will have to set this up for the first time.\n\n\nTest if it is setup: Open a new Terminal window and check the git configs:\ngit config user.name\nIf it returns your name, great. You can probably stop here.\n\n\nIf git is not set for you, you need to set it.\n\nSet your user.name:\n\ngit config --global user.name \"Your Name\"\nAnd then set your email (with your actual email):\ngit config --global user.email youremail@yourdomain.com\nNext, set the computer to save your credentials after the first time you enter them. Be prepared to enter your github username and password.\ngit config --global credential.helper osxkeychain\n\n\n\n\n\nFirst, check if Node is already installed:\n\nnode -v\nIf Node is already installed, you should get back a version number, like “v10.19.0”. If it does, you can probably stop here.\n\n\nIf you didn’t get a version number above, you need to install stuff.\n\nFrom your Terminal, in your home directory, install NVM:\n\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n\nClose and restart your Terminal window.\nNow install the version of Node we wll use:\n\nnvm install 10.19.0\n\nNow install node package manager:\n\nnpm install -g npm\n\nInstall Gulp and Degit:\n\nnpm install -g gulp degit\nFor good measure restart Terminal and Visual Studio Code.\n\n\n\n\nLet’s say you have been working on a project that is stored on GitHub, but when you come to the lab machine your repo is not on it. Here is how I suggest you get it.\n\nLaunch Terminal\nGo into the Documents folder: cd Documents\nDo ls just to make sure your project isn’t already there. (If it is, stop as you can likely launch VS Code and get to work).\nIn your browser, go to your repo on GitHub.com.\nClick on the green Code button.\nMake sure it is on HTTPS and copy the link.\n\n\n\n\nGet git\n\n\n\nIn your Terminal, do git clone and then paste the link and run it.\nThis will download AND connect you to the repo.\nNow you can go to Visual Studio Code and open the project folder and work as you normally would. It should be in your Documents folder.\nDON’T FORGET TO PUSH YOUR CODE so you don’t lose it.\n\n\n\n\nIf you want, you can go to VS Code Goodies and grab the preferences. It might make life easier for you."
  },
  {
    "objectID": "ut-lab-short.html#test-git-setups",
    "href": "ut-lab-short.html#test-git-setups",
    "title": "Starting up a UT Lab computer",
    "section": "",
    "text": "Test if it is setup: Open a new Terminal window and check the git configs:\ngit config user.name\nIf it returns your name, great. You can probably stop here.\n\n\nIf git is not set for you, you need to set it.\n\nSet your user.name:\n\ngit config --global user.name \"Your Name\"\nAnd then set your email (with your actual email):\ngit config --global user.email youremail@yourdomain.com\nNext, set the computer to save your credentials after the first time you enter them. Be prepared to enter your github username and password.\ngit config --global credential.helper osxkeychain"
  },
  {
    "objectID": "ut-lab-short.html#installing-node",
    "href": "ut-lab-short.html#installing-node",
    "title": "Starting up a UT Lab computer",
    "section": "",
    "text": "First, check if Node is already installed:\n\nnode -v\nIf Node is already installed, you should get back a version number, like “v10.19.0”. If it does, you can probably stop here.\n\n\nIf you didn’t get a version number above, you need to install stuff.\n\nFrom your Terminal, in your home directory, install NVM:\n\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n\nClose and restart your Terminal window.\nNow install the version of Node we wll use:\n\nnvm install 10.19.0\n\nNow install node package manager:\n\nnpm install -g npm\n\nInstall Gulp and Degit:\n\nnpm install -g gulp degit\nFor good measure restart Terminal and Visual Studio Code."
  },
  {
    "objectID": "ut-lab-short.html#to-pull-an-existing-project-from-github",
    "href": "ut-lab-short.html#to-pull-an-existing-project-from-github",
    "title": "Starting up a UT Lab computer",
    "section": "",
    "text": "Let’s say you have been working on a project that is stored on GitHub, but when you come to the lab machine your repo is not on it. Here is how I suggest you get it.\n\nLaunch Terminal\nGo into the Documents folder: cd Documents\nDo ls just to make sure your project isn’t already there. (If it is, stop as you can likely launch VS Code and get to work).\nIn your browser, go to your repo on GitHub.com.\nClick on the green Code button.\nMake sure it is on HTTPS and copy the link.\n\n\n\n\nGet git\n\n\n\nIn your Terminal, do git clone and then paste the link and run it.\nThis will download AND connect you to the repo.\nNow you can go to Visual Studio Code and open the project folder and work as you normally would. It should be in your Documents folder.\nDON’T FORGET TO PUSH YOUR CODE so you don’t lose it."
  },
  {
    "objectID": "ut-lab-short.html#vs-code-goodies",
    "href": "ut-lab-short.html#vs-code-goodies",
    "title": "Starting up a UT Lab computer",
    "section": "",
    "text": "If you want, you can go to VS Code Goodies and grab the preferences. It might make life easier for you."
  },
  {
    "objectID": "setup-part-1.html",
    "href": "setup-part-1.html",
    "title": "Setup: Part 1",
    "section": "",
    "text": "Now that you have a little familiarity with you Terminal on your computer, we’re going to use it to install a bunch of stuff on you computer. During this setup you will be doing a bunch of steps on blind faith without much explanation, mostly downloading software and configuring it. I don’t go into a lot of details because these steps are typically only done once.xw\nYou’ll be using your Terminal (or GitBash on Windows), which is a program that allows you to talk to your computer using text. It might seem scary at first but you’ll soon get used to it as you’ll be using your Terminal throughout this class (mostly from within Visual Studio Code).\nBe sure to read all the directions for a particular section before diving in as there are hints that you’ll need as you install and configure.\nThere are some cases here where macOS and Windows differs greatly. I’ll try to make those differences clear.\n\n\nNote there are some platform differences here …\n\nmacOSWindows\n\n\nHomebrew is a “package manager”, meaning it is a program to help you install other programs that are not in Apple’s app store … usually geeky things. We’ll use Homebrew to install Git, which you will learn more about soon.\n\nInstall Homebrew. Just go to that page and copy that first command noted and then run it in your terminal and then come back here. IT WILL TAKE SOME TIME. Once it is done …\nInstall Git using this homebrew command: brew install git.\n\nDon’t install any Git GUI clients. Git just lives inside your computer and we’ll use the Terminal to control it instead of a traditional “app”.\n\n\nIf you did the “Terminal” chapters in this book then you’ve already installed Git and you can move onto the next section to configure it.\nIf you haven’t for some reason, download it from Git Downloads and install it. When asked to “Adjust your PATH environment” choose “Use Git from Git Bash only”.\n\n\n\n\n\n\nHere we’ll update some settings within git on your machine.\nFirst we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name in quotes instead of “Mona Lisa”:\n\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\n\nIn your Terminal do this but use your email:\n\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account.\nLastly we’ll set git to name your default branch “main” instead of “master” as this is a new standard.\n\nIn your terminal, run this:\n\ngit config --global init.defaultBranch main\nYou won’t get a reponse unless there was a problem.\n\n\n\nIf you don’t already have a GitHub account, go to github.com and create an account.\n\n\n\n\n\n\nImportant\n\n\n\nChoose your Github username carefully and don’t make the name specific to this class. This is your personal GitHub profile FOREVER. I would also avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them.\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIf you have ever set up SSH keys before, find the instructor. (If you don’t understand that sentence, you likely haven’t.)\n\n\nWe’re going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doesn’t like sending your password around). It will seem complicated, but it’s not really.\nThese directions from from here (macOS | Windows) but try the steps for your computer listed below as they are streamlined.\n\nDuring this process, you’ll be asked to save the location of the rsa_id. Just hit return to save the default location.\nYou’ll also be asked to set a password for the file. JUST LEAVE THE PASSWORD BLANK and hit return. It will ask you a couple of times.\nAt the end of the installation, it will give a path to the rsa_id file. We might need to open this file in the next step to copy it. Ask for help at this step.\n\n\nIn your terminal, run the following command but with your email:\n\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\nWhen it prompts you about a location, JUST HIT RETURN to accept the default.\nwhen it prompts you for a passphrase, JUST HIT RETURN to leave it blank.\n\nYou should get a nice little art looking return on your terminal, eventually.\nWhat those steps did is create a file on your computer and put inside of it a bunch of random characters.\nTo “copy” the contents of this file, the command differs between macOS and Windows:\n\nmacOSWindows\n\n\n\nOnce you are through the steps above, do the following command:\n\npbcopy &lt; ~/.ssh/id_ed25519.pub\n\n\n\nOnce you are through the steps above, do the following command:\n\nclip &lt; ~/.ssh/id_ed25519.pub\n\n\n\nThis copies the contents of that file you created to your clipboard. It’s like opening the file and copying the contents.\n\n\n\nNow we’ll save the contents of that secret file on your computer into your Github account so Github “knows” about your computer.\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, so Command-V to paste your key into the box.\n\nIt will look something like this (but the contents will be different):\n\n\n\nSaving the key\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n\n\nFrom your Terminal, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!\n\n\n\n\nIf you can’t set SSH keys, you can at least reduce the number of times you have to enter your GitHub name/password by caching your password. We’ll have to use this method for lab computers.\n\n\n\n\nWe will use the code editor Visual Studio Code, made by Microsoft. It is free. We need to install it now.\n\nInstall the code editor Visual Studio Code on your machine.\nAfter you’ve installed it, launch Visual Studio Code.\nOpen the Command Palette (View &gt; Command Palette) and type in &gt;shell command and look for the return Shell Command: Install ‘code’ command in PATH. Choose that.\n\n\n\n\nAdd code to path\n\n\nIt allows us to open files in VS Code directly from a Terminal.\n\n\n\n\n\n\nImportant\n\n\n\nWindows users have one more thing to do: We need to configure your VS Code integrated terminal to use Git Bash.\n\nGo to View &gt; Command Palette and type in &gt;Terminal: Select Default Shell and choose it.\nWhen it prompts you with choices, choose git bash.\n\n\n\n\n\n\nClose your Terminal and restart it.\nType code ./ and see it opens VS Code.\n\nHollar if it doesn’t. We need that to work before the next step.\n\n\n\n\nThis next tool gives us some feedback in our Terminal when we are using git.\n\nOpen a new Git Bash window to install the git-bash-prompt with the following command:\n\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\nThis should install the software you need to your home directory.\n\nNow we’ll open (or create) a settings file for bash:\n\ncode ~/.bash_profile\n\n\n\n\n\n\nNote\n\n\n\nIf the above command doesn’t open the file in VS Code then you didn’t set the code command in the “Code Editor” section. First quit/relaunch Terminal and try again. If that doesn’t work, go back to “Launching from the command line” and do that again.)\n\n\n\nOnce your .bash_profile opens in VS Code, copy and paste this into the bottom of the file based on your operating system. (If there is any content in the file already, leave that there.)\n\n\nmacOSWindows\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\n\n# sets shorter prompt name\nPS1='\\u:\\W\\$ '\n\n# hides zsh prompt\nexport BASH_SILENCE_DEPRECATION_WARNING=1\nIn addition to adding some commands to help you with git, we also added something to shorten your terminal prompt. We also added a command to stop asking you to change to zsh.\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\nThis tells your terminal to use the gitprompt software we installed above.\n\n\n\n\nClose and restart your Terminal program to load the new settings.\n\n\n\n\n\n\n\nIf you want to read more about git-bash-prompt, you can here. Totally optional. We’ll talk about it later.\n\n\n\n\n\n\nIf you look on the left-menu of Visual Studio code, there is a square puzzle looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\n\nIn VS Code, click on the Extensions icon.\nIn the search box, type in Live Server and find the one created by Ritwick Dey.\nClick the Install button on that page.\nDo the same for markdownlint by David Anson.\nDo the same for Nunjucks by ronnidc.\n\nThese all make Visual Studio Code more awesomer in different ways.\n\n\n\nI have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Preferences &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\n\n\n\nvs-code-setting-as-code\n\n\n\nIn the new file that opens, copy and paste the code below and replace what is there.\n\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2,\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    },\n}\n\nSave and close the file.\n\nThis sets the default text size, line wrapping, tab stops and other useful things we will need. If you find the text too big, you can change the number in the configuration.\n\n\n\nI recommend that you use Google Chrome as your browser for this class. It is what I’ll use in class and demonstrations, and it has lots of development tools built in that will come in handy.\n\n\n\nWe need to make sure everything is set correctly before moving on. So here is how to check:\nBefore doing this, open a new Terminal window:\n\nDo git config user.name and you should get a response that is your name.\nDo git config user.email and you should get back your email address.\nDo ssh -T git@github.com to test SSH keys. If you are asked about “RSA key fingerprint”, say yes. In the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.”\nDo ls -a | grep bash and you should get a list that includes at least “.bash-git-prompt” and “.bash_profile”.\nDo code ~/.bash_profile and it should open your bash_profile, which should have (at least):\n\n\nmacOSWindows\n\n\n\n\n\ngit-bash-prompt\n\n\n\n\n\n\n\ngit-bash-prompt"
  },
  {
    "objectID": "setup-part-1.html#install-git",
    "href": "setup-part-1.html#install-git",
    "title": "Setup: Part 1",
    "section": "",
    "text": "Note there are some platform differences here …\n\nmacOSWindows\n\n\nHomebrew is a “package manager”, meaning it is a program to help you install other programs that are not in Apple’s app store … usually geeky things. We’ll use Homebrew to install Git, which you will learn more about soon.\n\nInstall Homebrew. Just go to that page and copy that first command noted and then run it in your terminal and then come back here. IT WILL TAKE SOME TIME. Once it is done …\nInstall Git using this homebrew command: brew install git.\n\nDon’t install any Git GUI clients. Git just lives inside your computer and we’ll use the Terminal to control it instead of a traditional “app”.\n\n\nIf you did the “Terminal” chapters in this book then you’ve already installed Git and you can move onto the next section to configure it.\nIf you haven’t for some reason, download it from Git Downloads and install it. When asked to “Adjust your PATH environment” choose “Use Git from Git Bash only”."
  },
  {
    "objectID": "setup-part-1.html#configure-git",
    "href": "setup-part-1.html#configure-git",
    "title": "Setup: Part 1",
    "section": "",
    "text": "Here we’ll update some settings within git on your machine.\nFirst we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name in quotes instead of “Mona Lisa”:\n\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\n\nIn your Terminal do this but use your email:\n\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account.\nLastly we’ll set git to name your default branch “main” instead of “master” as this is a new standard.\n\nIn your terminal, run this:\n\ngit config --global init.defaultBranch main\nYou won’t get a reponse unless there was a problem."
  },
  {
    "objectID": "setup-part-1.html#set-up-github",
    "href": "setup-part-1.html#set-up-github",
    "title": "Setup: Part 1",
    "section": "",
    "text": "If you don’t already have a GitHub account, go to github.com and create an account.\n\n\n\n\n\n\nImportant\n\n\n\nChoose your Github username carefully and don’t make the name specific to this class. This is your personal GitHub profile FOREVER. I would also avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them."
  },
  {
    "objectID": "setup-part-1.html#saving-your-github-credentials",
    "href": "setup-part-1.html#saving-your-github-credentials",
    "title": "Setup: Part 1",
    "section": "",
    "text": "Important\n\n\n\nIf you have ever set up SSH keys before, find the instructor. (If you don’t understand that sentence, you likely haven’t.)\n\n\nWe’re going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doesn’t like sending your password around). It will seem complicated, but it’s not really.\nThese directions from from here (macOS | Windows) but try the steps for your computer listed below as they are streamlined.\n\nDuring this process, you’ll be asked to save the location of the rsa_id. Just hit return to save the default location.\nYou’ll also be asked to set a password for the file. JUST LEAVE THE PASSWORD BLANK and hit return. It will ask you a couple of times.\nAt the end of the installation, it will give a path to the rsa_id file. We might need to open this file in the next step to copy it. Ask for help at this step.\n\n\nIn your terminal, run the following command but with your email:\n\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\nWhen it prompts you about a location, JUST HIT RETURN to accept the default.\nwhen it prompts you for a passphrase, JUST HIT RETURN to leave it blank.\n\nYou should get a nice little art looking return on your terminal, eventually.\nWhat those steps did is create a file on your computer and put inside of it a bunch of random characters.\nTo “copy” the contents of this file, the command differs between macOS and Windows:\n\nmacOSWindows\n\n\n\nOnce you are through the steps above, do the following command:\n\npbcopy &lt; ~/.ssh/id_ed25519.pub\n\n\n\nOnce you are through the steps above, do the following command:\n\nclip &lt; ~/.ssh/id_ed25519.pub\n\n\n\nThis copies the contents of that file you created to your clipboard. It’s like opening the file and copying the contents."
  },
  {
    "objectID": "setup-part-1.html#saving-ssh-key-in-github",
    "href": "setup-part-1.html#saving-ssh-key-in-github",
    "title": "Setup: Part 1",
    "section": "",
    "text": "Now we’ll save the contents of that secret file on your computer into your Github account so Github “knows” about your computer.\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, so Command-V to paste your key into the box.\n\nIt will look something like this (but the contents will be different):\n\n\n\nSaving the key\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n\n\nFrom your Terminal, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!\n\n\n\n\nIf you can’t set SSH keys, you can at least reduce the number of times you have to enter your GitHub name/password by caching your password. We’ll have to use this method for lab computers."
  },
  {
    "objectID": "setup-part-1.html#text-editor",
    "href": "setup-part-1.html#text-editor",
    "title": "Setup: Part 1",
    "section": "",
    "text": "We will use the code editor Visual Studio Code, made by Microsoft. It is free. We need to install it now.\n\nInstall the code editor Visual Studio Code on your machine.\nAfter you’ve installed it, launch Visual Studio Code.\nOpen the Command Palette (View &gt; Command Palette) and type in &gt;shell command and look for the return Shell Command: Install ‘code’ command in PATH. Choose that.\n\n\n\n\nAdd code to path\n\n\nIt allows us to open files in VS Code directly from a Terminal.\n\n\n\n\n\n\nImportant\n\n\n\nWindows users have one more thing to do: We need to configure your VS Code integrated terminal to use Git Bash.\n\nGo to View &gt; Command Palette and type in &gt;Terminal: Select Default Shell and choose it.\nWhen it prompts you with choices, choose git bash.\n\n\n\n\n\n\nClose your Terminal and restart it.\nType code ./ and see it opens VS Code.\n\nHollar if it doesn’t. We need that to work before the next step."
  },
  {
    "objectID": "setup-part-1.html#installing-bash-git-prompt",
    "href": "setup-part-1.html#installing-bash-git-prompt",
    "title": "Setup: Part 1",
    "section": "",
    "text": "This next tool gives us some feedback in our Terminal when we are using git.\n\nOpen a new Git Bash window to install the git-bash-prompt with the following command:\n\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\nThis should install the software you need to your home directory.\n\nNow we’ll open (or create) a settings file for bash:\n\ncode ~/.bash_profile\n\n\n\n\n\n\nNote\n\n\n\nIf the above command doesn’t open the file in VS Code then you didn’t set the code command in the “Code Editor” section. First quit/relaunch Terminal and try again. If that doesn’t work, go back to “Launching from the command line” and do that again.)\n\n\n\nOnce your .bash_profile opens in VS Code, copy and paste this into the bottom of the file based on your operating system. (If there is any content in the file already, leave that there.)\n\n\nmacOSWindows\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\n\n# sets shorter prompt name\nPS1='\\u:\\W\\$ '\n\n# hides zsh prompt\nexport BASH_SILENCE_DEPRECATION_WARNING=1\nIn addition to adding some commands to help you with git, we also added something to shorten your terminal prompt. We also added a command to stop asking you to change to zsh.\n\n\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\nThis tells your terminal to use the gitprompt software we installed above.\n\n\n\n\nClose and restart your Terminal program to load the new settings.\n\n\n\n\n\n\n\nIf you want to read more about git-bash-prompt, you can here. Totally optional. We’ll talk about it later."
  },
  {
    "objectID": "setup-part-1.html#vs-code-extensions",
    "href": "setup-part-1.html#vs-code-extensions",
    "title": "Setup: Part 1",
    "section": "",
    "text": "If you look on the left-menu of Visual Studio code, there is a square puzzle looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\n\nIn VS Code, click on the Extensions icon.\nIn the search box, type in Live Server and find the one created by Ritwick Dey.\nClick the Install button on that page.\nDo the same for markdownlint by David Anson.\nDo the same for Nunjucks by ronnidc.\n\nThese all make Visual Studio Code more awesomer in different ways."
  },
  {
    "objectID": "setup-part-1.html#vs-code-preferences",
    "href": "setup-part-1.html#vs-code-preferences",
    "title": "Setup: Part 1",
    "section": "",
    "text": "I have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Preferences &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\n\n\n\nvs-code-setting-as-code\n\n\n\nIn the new file that opens, copy and paste the code below and replace what is there.\n\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2,\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    },\n}\n\nSave and close the file.\n\nThis sets the default text size, line wrapping, tab stops and other useful things we will need. If you find the text too big, you can change the number in the configuration."
  },
  {
    "objectID": "setup-part-1.html#use-google-chrome",
    "href": "setup-part-1.html#use-google-chrome",
    "title": "Setup: Part 1",
    "section": "",
    "text": "I recommend that you use Google Chrome as your browser for this class. It is what I’ll use in class and demonstrations, and it has lots of development tools built in that will come in handy."
  },
  {
    "objectID": "setup-part-1.html#testing-part-1-setup",
    "href": "setup-part-1.html#testing-part-1-setup",
    "title": "Setup: Part 1",
    "section": "",
    "text": "We need to make sure everything is set correctly before moving on. So here is how to check:\nBefore doing this, open a new Terminal window:\n\nDo git config user.name and you should get a response that is your name.\nDo git config user.email and you should get back your email address.\nDo ssh -T git@github.com to test SSH keys. If you are asked about “RSA key fingerprint”, say yes. In the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.”\nDo ls -a | grep bash and you should get a list that includes at least “.bash-git-prompt” and “.bash_profile”.\nDo code ~/.bash_profile and it should open your bash_profile, which should have (at least):\n\n\nmacOSWindows\n\n\n\n\n\ngit-bash-prompt\n\n\n\n\n\n\n\ngit-bash-prompt"
  },
  {
    "objectID": "macintosh-02.html",
    "href": "macintosh-02.html",
    "title": "Macintosh Part 2: Installing Node.js setup",
    "section": "",
    "text": "Hold off on this until we get to this part later in the semester.\nIf we have reached that point, then fire up your Terminal.\n\n\nSee if you already have the XCode command-line tools installed.\n\nRun this in your Terminal:\nxcode-select -p\n\nYou should get a path in return. Something like “/Library/Developer/CommandLineTools”.\nIf you don’t AND ONLY IF YOU DON’T, you need to install it.\n\n\n\nIn your Terminal run this:\nxcode-select --install\nA software update popup window will appear that asks: “The xcode-select command requires the command line developer tools. Would you like to install the tools now?” choose to confirm this by clicking Install, then agree to the Terms of Service when requested (feel free to read them thoroughly, we’ll be here).\n\nIt can take a long while to download and install. If you get an error on this install, let me know as I have a copy I can give you.\n\n\n\n\n\n\nWe will use NVM to install Node.js. Again, follow the prompts and you should be fine.\n\nGo to this page and copy the first code chunk that starts with curl.\nPaste that into your Terminal and run it.\nAfter it is done, quit Terminal and relaunch it.\nTest: After relaunching a terminal do nvm list to make sure you don’t get an error.\n\n\n\n\nUse NVM to install Node.\n\nInstall “v16.18.0” of Node:\nnvm install 16.18.0\nTest: Do node -v to make sure it worked. It should give you back “v16.18.0”.\n\n\n\n\n\nTo update npm, run this:\nnpm install -g npm\nTest: Do npm -v and it should return with a version number.\n\n\n\n\n\nThere are some additional global npm tools that we need to install for our tour of NodeJS-based build tools.\n\nRun this:\nnpm install -g gulp degit\n\nThese are for the task manager Gulp and a scaffolding tool Degit.\n\n\n\nThere is a point in class when your computer will need access to your Google Drive account. Much like ssh keys, we’ll need specific credentials that work only for you. We will use the Google Cloud Project’s command line interface tool to do this. Otherwise known as the gcloud CLI.\n\nIMPORTANT: You must have and use a PERSONAL Gmail/Google account for this process. Your UTMail Google account will not work.\n\n\n\nTo make the installation of packages simple, we are going to use the MacOS package manager brew to install some Google Cloud tools. You should already have brew installed from earlier in the semester.\n\nRun the following to install the Google Cloud SDK\nbrew install --cask google-cloud-sdk\nTest: Run gcloud --version and make sure a version number is returned.\n\n\n\n\nWe are now going to authenticate our Google credentials on our local machine. Make sure to select your personal gmail account for this part. If you use your utexas.edu email, you won’t have permission to do what we need to do.\n\nIn a web browser, make sure you are logged into your PERSONAL Google account.\nIn a Terminal, use the following command:\ngcloud auth login --brief --enable-gdrive-access\n\nThis will open a browser where it will show you all of your available Google names. After you select your personal gmail account, you will be sent to a permissions screen that will look something like this:\n\n\n\ngcloud auth\n\n\nClick Allow and you will have given your computer access to manage files on your Google Drive and in the Google Cloud Project.\n\n\n\nAgain, be in your personal Google account as you will have to authenticate again.\nWe are going to run through several gcloud commands to set you computer to access Google Docs and Google sheets through programing. It’s a lot of ecsoteric steps and things could go wrong at each step. I don’t outline the output you get in return, but there can be a little or a lot.\nYou may be asked some questions during installation. You should be able to answer with the default answer (usually capitalized). If you try these steps more than once you might be errors that a project exists. Ask for help.\nJust keep an eye out for ERROR or can't find [whatever] and hollar if that happens.\nLaunch a fresh Terminal for this.\n\nAfter you run the first command below, take note of the last line of the return. Does it say Updated property [core/project] to [icj-project]? If not, it probably added random letters and numbers at the end of icj-project and you might need that string later. PLEASE ASK FOR HELP IF SO.\n\n\nDo this command to create the project:\ngcloud projects create icj-project --set-as-default --name=\"ICJ Project\"\nDo this to log in and set your project as a default:\ngcloud auth application-default login\nNext, we’ll create a Google service account:\ngcloud iam service-accounts create generic-service-account\nNext we need to bind the service account to our project with the command below. You should get a reply that reports bindings for roles of editor and owner. (This is where we might need to make adjustments if your project id has random letters/numbers.)\ngcloud projects add-iam-policy-binding icj-project --member='serviceAccount:generic-service-account@icj-project.iam.gserviceaccount.com' --role='roles/editor'\nThen we enable the Google Docs and Sheets API for your project:\ngcloud services enable docs.googleapis.com sheets.googleapis.com\nNow we’ll create a service account authorization key. This is similar to ssh key above, but for Google:\ngcloud iam service-accounts keys create \"$HOME/.config/gcloud/service_account_key.json\" \\\n    --iam-account=generic-service-account@icj-project.iam.gserviceaccount.com\nThen add the key to your .bash_profile with this commaned:\necho 'export GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/.config/gcloud/service_account_key.json\"' &gt;&gt;~/.bash_profile\nSync your terminal with the updated bash profile:\nsource ~/.bash_profile\n\nYes, that was a lot. Hopefuly it worked. We’re about to find out.\n\n\n\n\n\nCreate a folder in your icj folder called yourname-test.\nOpen that folder in Visual Studio Code.\nOpen a VS Code Terminal and run:\n\ndegit utdata/icj-google-fetch-test#main\nYou should get this in return:\n&gt; cloned utdata/icj-google-fetch-test#main\nAnd it will download a bunch of files into your folder.\n\nRun npm ci. This will also download a bunch of files. It might take a couple of minutes to run.\nRun gulp fetch.\n\nIf everything works, you should have a return like this:\n$ gulp fetch\n[14:38:53] Using gulpfile ~/Documents/icj/icj-fetch-test/gulpfile.js\n[14:38:53] Starting 'fetch'...\n[14:38:53] Finished 'fetch' after 8.61 ms\nDownloaded `library` (1RgMhjtkXlbbf9uzSzy_xPRKwxcVZIZqVytgM_JoU4E4)\nDownloaded `bookstores` (1gDwO-32cgpBDn_0niV0iu6TqQTaRDr4nmSqnT53magY)\nYour path might differ for “Using gulpfile”, but what you are looking for is that two files were downloaded, one called library and one called bookstores.\n\nYou should be done!"
  },
  {
    "objectID": "macintosh-02.html#checking-xcode",
    "href": "macintosh-02.html#checking-xcode",
    "title": "Macintosh Part 2: Installing Node.js setup",
    "section": "",
    "text": "See if you already have the XCode command-line tools installed.\n\nRun this in your Terminal:\nxcode-select -p\n\nYou should get a path in return. Something like “/Library/Developer/CommandLineTools”.\nIf you don’t AND ONLY IF YOU DON’T, you need to install it.\n\n\n\nIn your Terminal run this:\nxcode-select --install\nA software update popup window will appear that asks: “The xcode-select command requires the command line developer tools. Would you like to install the tools now?” choose to confirm this by clicking Install, then agree to the Terms of Service when requested (feel free to read them thoroughly, we’ll be here).\n\nIt can take a long while to download and install. If you get an error on this install, let me know as I have a copy I can give you."
  },
  {
    "objectID": "macintosh-02.html#setting-up-a-node-environment",
    "href": "macintosh-02.html#setting-up-a-node-environment",
    "title": "Macintosh Part 2: Installing Node.js setup",
    "section": "",
    "text": "We will use NVM to install Node.js. Again, follow the prompts and you should be fine.\n\nGo to this page and copy the first code chunk that starts with curl.\nPaste that into your Terminal and run it.\nAfter it is done, quit Terminal and relaunch it.\nTest: After relaunching a terminal do nvm list to make sure you don’t get an error.\n\n\n\n\nUse NVM to install Node.\n\nInstall “v16.18.0” of Node:\nnvm install 16.18.0\nTest: Do node -v to make sure it worked. It should give you back “v16.18.0”.\n\n\n\n\n\nTo update npm, run this:\nnpm install -g npm\nTest: Do npm -v and it should return with a version number."
  },
  {
    "objectID": "macintosh-02.html#icj-project-setup",
    "href": "macintosh-02.html#icj-project-setup",
    "title": "Macintosh Part 2: Installing Node.js setup",
    "section": "",
    "text": "There are some additional global npm tools that we need to install for our tour of NodeJS-based build tools.\n\nRun this:\nnpm install -g gulp degit\n\nThese are for the task manager Gulp and a scaffolding tool Degit."
  },
  {
    "objectID": "macintosh-02.html#google-drive-authentication",
    "href": "macintosh-02.html#google-drive-authentication",
    "title": "Macintosh Part 2: Installing Node.js setup",
    "section": "",
    "text": "There is a point in class when your computer will need access to your Google Drive account. Much like ssh keys, we’ll need specific credentials that work only for you. We will use the Google Cloud Project’s command line interface tool to do this. Otherwise known as the gcloud CLI.\n\nIMPORTANT: You must have and use a PERSONAL Gmail/Google account for this process. Your UTMail Google account will not work.\n\n\n\nTo make the installation of packages simple, we are going to use the MacOS package manager brew to install some Google Cloud tools. You should already have brew installed from earlier in the semester.\n\nRun the following to install the Google Cloud SDK\nbrew install --cask google-cloud-sdk\nTest: Run gcloud --version and make sure a version number is returned.\n\n\n\n\nWe are now going to authenticate our Google credentials on our local machine. Make sure to select your personal gmail account for this part. If you use your utexas.edu email, you won’t have permission to do what we need to do.\n\nIn a web browser, make sure you are logged into your PERSONAL Google account.\nIn a Terminal, use the following command:\ngcloud auth login --brief --enable-gdrive-access\n\nThis will open a browser where it will show you all of your available Google names. After you select your personal gmail account, you will be sent to a permissions screen that will look something like this:\n\n\n\ngcloud auth\n\n\nClick Allow and you will have given your computer access to manage files on your Google Drive and in the Google Cloud Project.\n\n\n\nAgain, be in your personal Google account as you will have to authenticate again.\nWe are going to run through several gcloud commands to set you computer to access Google Docs and Google sheets through programing. It’s a lot of ecsoteric steps and things could go wrong at each step. I don’t outline the output you get in return, but there can be a little or a lot.\nYou may be asked some questions during installation. You should be able to answer with the default answer (usually capitalized). If you try these steps more than once you might be errors that a project exists. Ask for help.\nJust keep an eye out for ERROR or can't find [whatever] and hollar if that happens.\nLaunch a fresh Terminal for this.\n\nAfter you run the first command below, take note of the last line of the return. Does it say Updated property [core/project] to [icj-project]? If not, it probably added random letters and numbers at the end of icj-project and you might need that string later. PLEASE ASK FOR HELP IF SO.\n\n\nDo this command to create the project:\ngcloud projects create icj-project --set-as-default --name=\"ICJ Project\"\nDo this to log in and set your project as a default:\ngcloud auth application-default login\nNext, we’ll create a Google service account:\ngcloud iam service-accounts create generic-service-account\nNext we need to bind the service account to our project with the command below. You should get a reply that reports bindings for roles of editor and owner. (This is where we might need to make adjustments if your project id has random letters/numbers.)\ngcloud projects add-iam-policy-binding icj-project --member='serviceAccount:generic-service-account@icj-project.iam.gserviceaccount.com' --role='roles/editor'\nThen we enable the Google Docs and Sheets API for your project:\ngcloud services enable docs.googleapis.com sheets.googleapis.com\nNow we’ll create a service account authorization key. This is similar to ssh key above, but for Google:\ngcloud iam service-accounts keys create \"$HOME/.config/gcloud/service_account_key.json\" \\\n    --iam-account=generic-service-account@icj-project.iam.gserviceaccount.com\nThen add the key to your .bash_profile with this commaned:\necho 'export GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/.config/gcloud/service_account_key.json\"' &gt;&gt;~/.bash_profile\nSync your terminal with the updated bash profile:\nsource ~/.bash_profile\n\nYes, that was a lot. Hopefuly it worked. We’re about to find out."
  },
  {
    "objectID": "macintosh-02.html#test-these-settings",
    "href": "macintosh-02.html#test-these-settings",
    "title": "Macintosh Part 2: Installing Node.js setup",
    "section": "",
    "text": "Create a folder in your icj folder called yourname-test.\nOpen that folder in Visual Studio Code.\nOpen a VS Code Terminal and run:\n\ndegit utdata/icj-google-fetch-test#main\nYou should get this in return:\n&gt; cloned utdata/icj-google-fetch-test#main\nAnd it will download a bunch of files into your folder.\n\nRun npm ci. This will also download a bunch of files. It might take a couple of minutes to run.\nRun gulp fetch.\n\nIf everything works, you should have a return like this:\n$ gulp fetch\n[14:38:53] Using gulpfile ~/Documents/icj/icj-fetch-test/gulpfile.js\n[14:38:53] Starting 'fetch'...\n[14:38:53] Finished 'fetch' after 8.61 ms\nDownloaded `library` (1RgMhjtkXlbbf9uzSzy_xPRKwxcVZIZqVytgM_JoU4E4)\nDownloaded `bookstores` (1gDwO-32cgpBDn_0niV0iu6TqQTaRDr4nmSqnT53magY)\nYour path might differ for “Using gulpfile”, but what you are looking for is that two files were downloaded, one called library and one called bookstores.\n\nYou should be done!"
  },
  {
    "objectID": "macintosh-01.html",
    "href": "macintosh-01.html",
    "title": "Setting up your Macintosh, Part 1",
    "section": "",
    "text": "Everything listed here is free.\n\nIf you have a new “M1 Apple Silicon” Mac (built 2021 or later) then pay special attention to directions when installing and look for “Apple Silicon” versions.\n\nIn setting up your Mac you will be doing a bunch of steps on blind faith without much explanation, mostly it is downloading software and configuring it. I don’t go into a lot of details because these steps are typically only done once.\nYou’ll be using your Terminal, which is a program that allows you to talk to your computer using text. It might be scary at first but you’ll soon get used to it as you’ll be using it throughout this class (mostly from within Visual Studio Code).\nBe sure to read all the directions for a particular section before diving in as there are hints that you’ll need as you install and configure.\n\n\nHomebrew is a “package manager”, meaning it helps you install programs that are not in the Apple app store. Git is a version control manager, which will learn about soon.\n\nInstall Homebrew. Just run the first command noted on that page and then come back here.\nInstall Git using this homebrew command: brew install git.\n\nDon’t install the Git GUI clients. There isn’t an “app” for Git, it just lives inside your computer.\n\n\nNext we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name instead of Mona Lisa:\n\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\n\nIn your Terminal do this but use your email:\n\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account.\n\n\n\n\nIf you don’t already have a GitHub account, go to github.com/ and create an account.\n\nIMPORTANT: Choose your username carefully and don’t make the name specific to this class. This is your personal GitHub profile FOREVER. I would avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them.\n\n\n\nWe’re going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doens’t like sending your password around). It will seem complicated, but it’s not really.\n\nIf you have ever set up SSH keys before, find the instructor. (If that doesn’t make sense to you, you likely haven’t.)\n\nBefore you do this next step, know it will ask you to supply a location and password: Leave it blank and just hit enter in both cases.\n\nIn your terminal, run the following command but with your email:\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nWhen it prompts you about a location, JUST HIT RETURN to accept the default.\nWhen it prompts you for a passphrase, JUST HIT RETURN to leave it blank.\n\nYou should get a nice little art looking return on your terminal, eventually.\n\n\n\nWhat those steps did is create a file on your computer and put inside of it a bunch of random characters. We now need to add the contents of those files into the Github web interface, so it can confirm you are you.\n\nOnce you are through the steps above, do the following command in your terminal:\n\npbcopy &lt; ~/.ssh/id_ed25519.pub\nThis copies the contents of that file you created to your clipboard. It’s like finding the file, opening it and then copying the contents.\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, do Command-V to paste your key into the box.\n\nIt will look something like this:\n\n\n\nkey\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n\n\n\nFrom your Terminal, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!\n\n\n\n\n\n\nInstall the code editor Visual Studio Code on your machine. (There are different versionf for Apple vs Intel chips.) It’s a typical application install that shouldn’t give you any trouble.\nFollow these “Launching from the command line” instructions to add the code command to your path. This allows us to launch Visual Studio Code from a terminal.\nTEST: Close your Terminal and restart it. Type code ./ and see it opens VS Code. Hollar if it doesn’t.\n\n\n\n\nWe are adding some software to adjust your Terminal prompt to show your git “state” when in a tracked folder.\n\nOpen a new Terminal window and do the following:\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\nNow open (or create) the .bash_profile file. (See note below if this doesn’t work)\ncode .bash_profile\nOnce your .bash_profile opens in VS Code, copy and paste this to the bottom of the file:\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\n\n# sets shorter prompt name\nPS1='\\u:\\W\\$ '\n\n# hides zsh prompt\nexport BASH_SILENCE_DEPRECATION_WARNING=1\nClose and restart your Terminal program to load the new settings.\n\nIn addition to adding some commands to help you with git, we also added something to shorten your terminal prompt. We also added a command to stop asking you to change to zsh.\n\nIf you use code .bash_profile and it doesn’t open the file in VS Code then you didn’t set the code command in the “Code Editor” section. First quit/relaunch Terminal and try again. If that doesn’t work, go back to “Launching from the command line” and do that again.\n\nMore on git-bash-prompt if we need it.\n\n\n\nIf you look on the left-menu of Visual Studio code, there is a square puzzle looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\n\nIn VS Code, click on the Extensions icon.\nIn the search box, type in Live Server and find the one created by Ritwick Dey.\nClick the Install button on that page.\nDo the same for markdownlint by David Anson.\nDo tne same for Nunjucks by ronnidc.\n\nThese all make Visual Studio Code more awesomer in different ways.\n\n\n\nI have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Preferences &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\nIn the new file that opens, copy and paste the code below and replace what is there.\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2,\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    },\n}\nSave and close the file.\n\nThis sets the default text size, line wrapping, tab stops and other useful things we will need.\n\n\n\nWe need to make sure everything is set correctly before moving on. So here is how to check:\nBefore doing this, open a new Terminal window:\n\nDo git config user.name and you should get a response that is your name.\nDo git config user.email and you should get back your email address.\nDo ssh -T git@github.com to test SSH keys. If you are asked about “RSA key fingerprint”, say yes. In the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.”\nDo ls -a | grep bash and you should get a list that includes at least “.bash-git-prompt” and “.bash_profile”.\nDo code ~/.bash_profile and it should open your bash_profile, which should have (at least):\n\n\n\n\ngit-bash-prompt\n\n\n\nNext: If you are in Intro to Coding, next up is learning more about version control using Git and GitHub.\nWe’ll handle Part 2 of the computer setup later in the semester."
  },
  {
    "objectID": "macintosh-01.html#install-homebrew-and-git",
    "href": "macintosh-01.html#install-homebrew-and-git",
    "title": "Setting up your Macintosh, Part 1",
    "section": "",
    "text": "Homebrew is a “package manager”, meaning it helps you install programs that are not in the Apple app store. Git is a version control manager, which will learn about soon.\n\nInstall Homebrew. Just run the first command noted on that page and then come back here.\nInstall Git using this homebrew command: brew install git.\n\nDon’t install the Git GUI clients. There isn’t an “app” for Git, it just lives inside your computer.\n\n\nNext we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name instead of Mona Lisa:\n\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\n\nIn your Terminal do this but use your email:\n\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account."
  },
  {
    "objectID": "macintosh-01.html#set-up-github",
    "href": "macintosh-01.html#set-up-github",
    "title": "Setting up your Macintosh, Part 1",
    "section": "",
    "text": "If you don’t already have a GitHub account, go to github.com/ and create an account.\n\nIMPORTANT: Choose your username carefully and don’t make the name specific to this class. This is your personal GitHub profile FOREVER. I would avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them.\n\n\n\nWe’re going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doens’t like sending your password around). It will seem complicated, but it’s not really.\n\nIf you have ever set up SSH keys before, find the instructor. (If that doesn’t make sense to you, you likely haven’t.)\n\nBefore you do this next step, know it will ask you to supply a location and password: Leave it blank and just hit enter in both cases.\n\nIn your terminal, run the following command but with your email:\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nWhen it prompts you about a location, JUST HIT RETURN to accept the default.\nWhen it prompts you for a passphrase, JUST HIT RETURN to leave it blank.\n\nYou should get a nice little art looking return on your terminal, eventually.\n\n\n\nWhat those steps did is create a file on your computer and put inside of it a bunch of random characters. We now need to add the contents of those files into the Github web interface, so it can confirm you are you.\n\nOnce you are through the steps above, do the following command in your terminal:\n\npbcopy &lt; ~/.ssh/id_ed25519.pub\nThis copies the contents of that file you created to your clipboard. It’s like finding the file, opening it and then copying the contents.\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, do Command-V to paste your key into the box.\n\nIt will look something like this:\n\n\n\nkey\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n\n\n\nFrom your Terminal, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!"
  },
  {
    "objectID": "macintosh-01.html#code-editor",
    "href": "macintosh-01.html#code-editor",
    "title": "Setting up your Macintosh, Part 1",
    "section": "",
    "text": "Install the code editor Visual Studio Code on your machine. (There are different versionf for Apple vs Intel chips.) It’s a typical application install that shouldn’t give you any trouble.\nFollow these “Launching from the command line” instructions to add the code command to your path. This allows us to launch Visual Studio Code from a terminal.\nTEST: Close your Terminal and restart it. Type code ./ and see it opens VS Code. Hollar if it doesn’t."
  },
  {
    "objectID": "macintosh-01.html#updating-the-bash_profile",
    "href": "macintosh-01.html#updating-the-bash_profile",
    "title": "Setting up your Macintosh, Part 1",
    "section": "",
    "text": "We are adding some software to adjust your Terminal prompt to show your git “state” when in a tracked folder.\n\nOpen a new Terminal window and do the following:\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\nNow open (or create) the .bash_profile file. (See note below if this doesn’t work)\ncode .bash_profile\nOnce your .bash_profile opens in VS Code, copy and paste this to the bottom of the file:\n# initiates the git bash prompt\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\n\n# sets shorter prompt name\nPS1='\\u:\\W\\$ '\n\n# hides zsh prompt\nexport BASH_SILENCE_DEPRECATION_WARNING=1\nClose and restart your Terminal program to load the new settings.\n\nIn addition to adding some commands to help you with git, we also added something to shorten your terminal prompt. We also added a command to stop asking you to change to zsh.\n\nIf you use code .bash_profile and it doesn’t open the file in VS Code then you didn’t set the code command in the “Code Editor” section. First quit/relaunch Terminal and try again. If that doesn’t work, go back to “Launching from the command line” and do that again.\n\nMore on git-bash-prompt if we need it."
  },
  {
    "objectID": "macintosh-01.html#vs-code-extensions",
    "href": "macintosh-01.html#vs-code-extensions",
    "title": "Setting up your Macintosh, Part 1",
    "section": "",
    "text": "If you look on the left-menu of Visual Studio code, there is a square puzzle looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\n\nIn VS Code, click on the Extensions icon.\nIn the search box, type in Live Server and find the one created by Ritwick Dey.\nClick the Install button on that page.\nDo the same for markdownlint by David Anson.\nDo tne same for Nunjucks by ronnidc.\n\nThese all make Visual Studio Code more awesomer in different ways."
  },
  {
    "objectID": "macintosh-01.html#vs-code-preferences",
    "href": "macintosh-01.html#vs-code-preferences",
    "title": "Setting up your Macintosh, Part 1",
    "section": "",
    "text": "I have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Preferences &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\nIn the new file that opens, copy and paste the code below and replace what is there.\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2,\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    },\n}\nSave and close the file.\n\nThis sets the default text size, line wrapping, tab stops and other useful things we will need."
  },
  {
    "objectID": "macintosh-01.html#testing-part-1-setup",
    "href": "macintosh-01.html#testing-part-1-setup",
    "title": "Setting up your Macintosh, Part 1",
    "section": "",
    "text": "We need to make sure everything is set correctly before moving on. So here is how to check:\nBefore doing this, open a new Terminal window:\n\nDo git config user.name and you should get a response that is your name.\nDo git config user.email and you should get back your email address.\nDo ssh -T git@github.com to test SSH keys. If you are asked about “RSA key fingerprint”, say yes. In the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.”\nDo ls -a | grep bash and you should get a list that includes at least “.bash-git-prompt” and “.bash_profile”.\nDo code ~/.bash_profile and it should open your bash_profile, which should have (at least):\n\n\n\n\ngit-bash-prompt\n\n\n\nNext: If you are in Intro to Coding, next up is learning more about version control using Git and GitHub.\nWe’ll handle Part 2 of the computer setup later in the semester."
  },
  {
    "objectID": "windows-01.html",
    "href": "windows-01.html",
    "title": "Windows",
    "section": "",
    "text": "I am a little less familiar with Windows, especially as it relates to OneDrive, so it’s possible we’ll run into issues. We’ll solve them.\nEverything listed here is free.\n\n\n\nWindows users have to install Git and Git Bash before doing the Command-line interface tools lesson. These next few steps do that.\n\n\nInstall Git, our source code version control program. This will allow us to save our code in steps. This will also install Git Bash, which will be your Terminal app.\n\nThere is one point in the installation process where you need to set “Use Git from Git Bash only”.\n\n\n\ngit setup\n\n\n\nUse the default settings for everything else.\nYou should now be able to find Git Bash from your Windows Start menu.\n\n\nIf you were sent here from the Command-line interface tools lesson, it’s time to go back there now. You’ll be sent back here to finish the rest later.\n\n\n\nNext we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name instead of Mona Lisa:\n\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\n\nIn your Terminal do this but use your email:\n\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account.\n\n\n\n\nIf you don’t already have a GitHub account, go to github.com/ and create an account.\n\nIMPORTANT: Choose your username carefully and don’t make the name specific to this class. This is your personal GitHub profile FOREVER. I would avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them.\n\n\n\nWe’re going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doens’t like sending your password around). It will seem complicated, but it’s not really.\n\nIf you have ever set up SSH keys before, find the instructor. (If that doesn’t make sense to you, you likely haven’t.)\n\nBefore you do this next step, know it will ask you to supply a location and password: Leave it blank and just hit enter in both cases.\n\nIn your terminal, run the following command but with your email:\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nWhen it prompts you about a location, JUST HIT RETURN to accept the default.\nWhen it prompts you for a passphrase, JUST HIT RETURN to leave it blank.\n\nYou should get a nice little art looking return on your terminal, eventually.\n\n\n\nWhat those steps did is create a file on your computer and put inside of it a bunch of random characters. We now need to add the contents of those files into the Github web interface, so it can confirm you are you.\n\nOnce you are through the steps above, do the following command in your terminal:\n\nclip &lt; ~/.ssh/id_ed25519.pub\nThis copies the contents of that file you created to your clipboard. It’s like finding the file, opening it and then copying the contents.\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, do Command-V to paste your key into the box.\n\nIt will look something like this:\n\n\n\nkey\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n\n\n\nFrom your Terminal, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!\n\n\n\n\nIf you can’t set SSH keys, you can at least reduce the number of times you have to enter your GitHub name/password by caching your password. We’ll have to use this method for lab computers.\n\n\n\n\nWe will use the code editor Visual Studio Code, made by Microsoft. It is free. We need to install it now.\n\nInstall Visual Studio Code.\nAfter installing, we need to configure your VS Code integrated terminal to use Git Bash. Go to View &gt; Command Palette and type in &gt;Terminal: Select Default Shell and choose it. When it prompts you with choices, choose git bash.\nOpen your Command Palette again (Cmd+Shift+p or View &gt; Command Palette) and type in &gt;shell command and look for the return **Shell Command: Install ‘code’ command in PATH. Choose that.\n\n\n\n\nAdd code to path\n\n\n\nQuit both VS Code and Git Bash for this to take affect.\n\n\n\n\nWe are adding some software to adjust your Terminal prompt to show your git “state” when in a tracked folder.\n\nOpen a new Terminal window and do the following:\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\nNow open (or create) the .bash_profile file. (See note below if this doesn’t work)\ncode .bash_profile\nOnce your .bash_profile opens in VS Code, copy and paste this to the bottom of the file:\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\nClose and restart your Terminal program to load the new settings.\n\nIn addition to adding some commands to help you with git, we also added something to shorten your terminal prompt. We also added a command to stop asking you to change to zsh.\n\nIf you use code .bash_profile and it doesn’t open the file in VS Code then you didn’t set the code command in the “Code Editor” section. First quit/relaunch Terminal and try again. If that doesn’t work, go back to “Launching from the command line” and do that again.\n\n\n\n\nIf you look on the left-menu of Visual Studio code, there is a square puzzle looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\n\nIn VS Code, click on the Extensions icon.\nIn the search box, type in Live Server and find the one created by Ritwick Dey.\nClick the Install button on that page.\nDo the same for markdownlint by David Anson.\nDo tne same for Nunjucks by ronnidc.\n\nThese all make Visual Studio Code more awesomer in different ways.\n\n\n\nI have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Preferences &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\nIn the new file that opens, copy and paste the code below and replace what is there.\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2,\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    },\n}\nSave and close the file.\n\nThis sets the default text size, line wrapping, tab stops and other useful things we will need.\n\n\n\nWe need to make sure everything is set correctly before moving on. So here is how to check:\nBefore doing this, open a new Terminal window:\n\nDo git config user.name and you should get a response that is your name.\nDo git config user.email and you should get back your email address.\nDo ssh -T git@github.com to test SSH keys. If you are asked about “RSA key fingerprint”, say yes. In the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.”\nDo ls -a | grep bash and you should get a list that includes at least “.bash-git-prompt” and “.bash_profile”.\nDo code ~/.bash_profile and it should open your bash_profile, which should have (at least):\n\n\n\n\ngit-bash-prompt\n\n\n\nNext: If you are in Intro to Coding, next up is learning more about version control using Git and GitHub.\nWe’ll handle Part 2 of the computer setup later in the semester."
  },
  {
    "objectID": "windows-01.html#install-git",
    "href": "windows-01.html#install-git",
    "title": "Windows",
    "section": "",
    "text": "Windows users have to install Git and Git Bash before doing the Command-line interface tools lesson. These next few steps do that.\n\n\nInstall Git, our source code version control program. This will allow us to save our code in steps. This will also install Git Bash, which will be your Terminal app.\n\nThere is one point in the installation process where you need to set “Use Git from Git Bash only”.\n\n\n\ngit setup\n\n\n\nUse the default settings for everything else.\nYou should now be able to find Git Bash from your Windows Start menu.\n\n\nIf you were sent here from the Command-line interface tools lesson, it’s time to go back there now. You’ll be sent back here to finish the rest later.\n\n\n\nNext we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name instead of Mona Lisa:\n\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\n\nIn your Terminal do this but use your email:\n\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account."
  },
  {
    "objectID": "windows-01.html#set-up-github",
    "href": "windows-01.html#set-up-github",
    "title": "Windows",
    "section": "",
    "text": "If you don’t already have a GitHub account, go to github.com/ and create an account.\n\nIMPORTANT: Choose your username carefully and don’t make the name specific to this class. This is your personal GitHub profile FOREVER. I would avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them.\n\n\n\nWe’re going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doens’t like sending your password around). It will seem complicated, but it’s not really.\n\nIf you have ever set up SSH keys before, find the instructor. (If that doesn’t make sense to you, you likely haven’t.)\n\nBefore you do this next step, know it will ask you to supply a location and password: Leave it blank and just hit enter in both cases.\n\nIn your terminal, run the following command but with your email:\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nWhen it prompts you about a location, JUST HIT RETURN to accept the default.\nWhen it prompts you for a passphrase, JUST HIT RETURN to leave it blank.\n\nYou should get a nice little art looking return on your terminal, eventually.\n\n\n\nWhat those steps did is create a file on your computer and put inside of it a bunch of random characters. We now need to add the contents of those files into the Github web interface, so it can confirm you are you.\n\nOnce you are through the steps above, do the following command in your terminal:\n\nclip &lt; ~/.ssh/id_ed25519.pub\nThis copies the contents of that file you created to your clipboard. It’s like finding the file, opening it and then copying the contents.\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, do Command-V to paste your key into the box.\n\nIt will look something like this:\n\n\n\nkey\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n\n\n\nFrom your Terminal, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!\n\n\n\n\nIf you can’t set SSH keys, you can at least reduce the number of times you have to enter your GitHub name/password by caching your password. We’ll have to use this method for lab computers."
  },
  {
    "objectID": "windows-01.html#text-editor",
    "href": "windows-01.html#text-editor",
    "title": "Windows",
    "section": "",
    "text": "We will use the code editor Visual Studio Code, made by Microsoft. It is free. We need to install it now.\n\nInstall Visual Studio Code.\nAfter installing, we need to configure your VS Code integrated terminal to use Git Bash. Go to View &gt; Command Palette and type in &gt;Terminal: Select Default Shell and choose it. When it prompts you with choices, choose git bash.\nOpen your Command Palette again (Cmd+Shift+p or View &gt; Command Palette) and type in &gt;shell command and look for the return **Shell Command: Install ‘code’ command in PATH. Choose that.\n\n\n\n\nAdd code to path\n\n\n\nQuit both VS Code and Git Bash for this to take affect."
  },
  {
    "objectID": "windows-01.html#installing-bash-git-prompt",
    "href": "windows-01.html#installing-bash-git-prompt",
    "title": "Windows",
    "section": "",
    "text": "We are adding some software to adjust your Terminal prompt to show your git “state” when in a tracked folder.\n\nOpen a new Terminal window and do the following:\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\nNow open (or create) the .bash_profile file. (See note below if this doesn’t work)\ncode .bash_profile\nOnce your .bash_profile opens in VS Code, copy and paste this to the bottom of the file:\nGIT_PROMPT_ONLY_IN_REPO=1\nsource ~/.bash-git-prompt/gitprompt.sh\nClose and restart your Terminal program to load the new settings.\n\nIn addition to adding some commands to help you with git, we also added something to shorten your terminal prompt. We also added a command to stop asking you to change to zsh.\n\nIf you use code .bash_profile and it doesn’t open the file in VS Code then you didn’t set the code command in the “Code Editor” section. First quit/relaunch Terminal and try again. If that doesn’t work, go back to “Launching from the command line” and do that again."
  },
  {
    "objectID": "windows-01.html#vs-code-extensions",
    "href": "windows-01.html#vs-code-extensions",
    "title": "Windows",
    "section": "",
    "text": "If you look on the left-menu of Visual Studio code, there is a square puzzle looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\n\nIn VS Code, click on the Extensions icon.\nIn the search box, type in Live Server and find the one created by Ritwick Dey.\nClick the Install button on that page.\nDo the same for markdownlint by David Anson.\nDo tne same for Nunjucks by ronnidc.\n\nThese all make Visual Studio Code more awesomer in different ways."
  },
  {
    "objectID": "windows-01.html#vs-code-preferences",
    "href": "windows-01.html#vs-code-preferences",
    "title": "Windows",
    "section": "",
    "text": "I have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Preferences &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\nIn the new file that opens, copy and paste the code below and replace what is there.\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2,\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    },\n}\nSave and close the file.\n\nThis sets the default text size, line wrapping, tab stops and other useful things we will need."
  },
  {
    "objectID": "windows-01.html#testing-part-1-setup",
    "href": "windows-01.html#testing-part-1-setup",
    "title": "Windows",
    "section": "",
    "text": "We need to make sure everything is set correctly before moving on. So here is how to check:\nBefore doing this, open a new Terminal window:\n\nDo git config user.name and you should get a response that is your name.\nDo git config user.email and you should get back your email address.\nDo ssh -T git@github.com to test SSH keys. If you are asked about “RSA key fingerprint”, say yes. In the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.”\nDo ls -a | grep bash and you should get a list that includes at least “.bash-git-prompt” and “.bash_profile”.\nDo code ~/.bash_profile and it should open your bash_profile, which should have (at least):\n\n\n\n\ngit-bash-prompt\n\n\n\nNext: If you are in Intro to Coding, next up is learning more about version control using Git and GitHub.\nWe’ll handle Part 2 of the computer setup later in the semester."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Setting up your computer for development",
    "section": "",
    "text": "Updated for Fall 2023\n\nThese lessons outline how to set up your computer for development using the technologies introduced in Intro to Coding for Journalists. This is written as basic steps to accomplish without much explanation of what you are doing and why. If you are new to coding or the class, I suggest you start with the command-line interface tools lesson instead. You’ll get back here soon enough.\nIf you are using a UT lab computer you’ll have to learn about some setup. Get with your instructor.\n\n\n\nMacintosh Part 1\nWindows Part 1\nLinux/Ubuntu\n\n\n\n\nThis part we will do later in the year, once we start using it.\n\nMacintosh Part 2\nWindows Part 2\n\n\n\n\n\nVS Code Goodies\ngcloud commands\nicj-project-rig for Codespaces"
  },
  {
    "objectID": "codespaces.html",
    "href": "codespaces.html",
    "title": "Setting GitHub Codespaces",
    "section": "",
    "text": "The icj-project-rig can be used in GitHub Codespaces, a free virtual machine environment. This might be helpful if you have trouble with your own computer.\nThis isn’t a tutorial on using Codespaces, but it does provide some necessary information if you explore the option. This assumes you already have your own copy of the project and it is pushed to Github. You work out of your own project.\n\n\nOnce you launch a codespace it will recognize you are in a Node environment but you still need to install some packages the first time you launch it:\n\nOnce the container is up and running, do npm install -g gulp to install gulp.\nRun npm ci to do a clean install on all the other packages in the project.\n\nIf you come back to an existing Codespace you should not have to run those again.\n\n\n\nThere is one gulp command that will not work in Codespaces unless you jump through some extra hoops.\ngulp fetch is the command that downloads Google Docs and Sheets documents as JSON, as outlined in project.config.json. The process expects to find an authorization file on your own computer that we set up in icj-setting-up Part 2, but that file doesn’t exist on the Codespaces virtual machine.\nYou’ll need to set up two environment variables to make it work.\n\nNOTE: It is absolutely imperative that you DO NOT commit the contents of service_account_key.json to your branch at all. If someone else were able to see the contents of that file, they could execute any action that service account has in its abilities. Since service_account_key.json is in the .gitignore file, you should not be able to check it in, but it is important to remember that for the sake of transparency.\n\nWe will be following the process shown here\nAs you follow those steps you’ll need the information below.\n\n\n\nThe “Name” of the secret will be GOOGLE_CREDENTIALS.\nThe “Value” of the secret will be: $HOME/.config/gcloud/service_account_key.json\n\n\n\n\n\nThe “Name” of the secret will be GOOGLE_APPLICATION_CREDENTIALS\nFor the “Value” of the secret you need to copy the contents of a file on your local machine. Follow the steps below:\n\n\nRun this command on your local machine, which will copy needed the file to your clipboard:\npbcopy &lt; $HOME/.config/gcloud/service_account_key.json\nReturn to your web browser and for the “Value” do Cmd-v to paste the contents of your clipboard.\n\n\n\n\n\nWhen you open your Codespace, you will run the following command.\nnpm run codespace-google-auth\nAfter doing that, you should be able to run gulp fetch to update the data JSON files."
  },
  {
    "objectID": "codespaces.html#install-gulp",
    "href": "codespaces.html#install-gulp",
    "title": "Setting GitHub Codespaces",
    "section": "",
    "text": "Once you launch a codespace it will recognize you are in a Node environment but you still need to install some packages the first time you launch it:\n\nOnce the container is up and running, do npm install -g gulp to install gulp.\nRun npm ci to do a clean install on all the other packages in the project.\n\nIf you come back to an existing Codespace you should not have to run those again."
  },
  {
    "objectID": "codespaces.html#google-auth-access",
    "href": "codespaces.html#google-auth-access",
    "title": "Setting GitHub Codespaces",
    "section": "",
    "text": "There is one gulp command that will not work in Codespaces unless you jump through some extra hoops.\ngulp fetch is the command that downloads Google Docs and Sheets documents as JSON, as outlined in project.config.json. The process expects to find an authorization file on your own computer that we set up in icj-setting-up Part 2, but that file doesn’t exist on the Codespaces virtual machine.\nYou’ll need to set up two environment variables to make it work.\n\nNOTE: It is absolutely imperative that you DO NOT commit the contents of service_account_key.json to your branch at all. If someone else were able to see the contents of that file, they could execute any action that service account has in its abilities. Since service_account_key.json is in the .gitignore file, you should not be able to check it in, but it is important to remember that for the sake of transparency.\n\nWe will be following the process shown here\nAs you follow those steps you’ll need the information below.\n\n\n\nThe “Name” of the secret will be GOOGLE_CREDENTIALS.\nThe “Value” of the secret will be: $HOME/.config/gcloud/service_account_key.json\n\n\n\n\n\nThe “Name” of the secret will be GOOGLE_APPLICATION_CREDENTIALS\nFor the “Value” of the secret you need to copy the contents of a file on your local machine. Follow the steps below:\n\n\nRun this command on your local machine, which will copy needed the file to your clipboard:\npbcopy &lt; $HOME/.config/gcloud/service_account_key.json\nReturn to your web browser and for the “Value” do Cmd-v to paste the contents of your clipboard."
  },
  {
    "objectID": "codespaces.html#load-the-secrets",
    "href": "codespaces.html#load-the-secrets",
    "title": "Setting GitHub Codespaces",
    "section": "",
    "text": "When you open your Codespace, you will run the following command.\nnpm run codespace-google-auth\nAfter doing that, you should be able to run gulp fetch to update the data JSON files."
  },
  {
    "objectID": "ut-lab.html",
    "href": "ut-lab.html",
    "title": "Starting up a UT Lab computer",
    "section": "",
    "text": "VERY OUT OF DATE\n\nLab machines could get wiped on Monday mornings, so you might have to reset everything. You definitely will have to set this up for the first time.\n\n\nTest if it is setup: Open a new Terminal window and check the git configs:\ngit config user.name\nIf it returns your name, great. You can probably stop here.\n\n\nIf git is not set for you, you need to set it.\n\nSet your user.name:\n\ngit config --global user.name \"Your Name\"\nAnd then set your email (with your actual email):\ngit config --global user.email youremail@yourdomain.com\nNext, set the computer to save your credentials after the first time you enter them.\ngit config --global credential.helper osxkeychain\nBe prepared to enter your github username and password.\n\n\n\nWhen you launch Terminal, it should put you in your home directory. If not, do cd ~.\n\nDo the following command to download bash-git-prompt:\n\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1\n\n\n\n\n\nFirst, check if Node is already installed:\n\nnode -v\nIf Node is already installed, you should get back a version number, like “v8.11.4”. If it does, you can probably stop here.\n\n\nIf you didn’t get a version number above, you need to install stuff.\n\nFrom your Terminal, in your home directory, install NVM:\n\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n\nClose and restart your Terminal window.\nNow install the version of Node we wll use:\n\nnvm install v16.13.0\n\nNow install node package manager:\n\nnpm install -g npm\n\nInstall Gulp and Degit:\n\nnpm install -g gulp degit\n\n\n\n\nWhen using the icj-project-template we use a secret key file to authenticate to Google Drive.\n\nIf you haven’t already, follow the directions in macintosh-02.md for Creating a service account key.\n\nIf you have created the file already but don’t have a copy of the file saved, you can go to Google Cloud Platform &gt; APIs & Services &gt; Credentials, edit your existing key and click Create key to download the file.\n\nRename the downloaded file as google_drive_fetch_token.json and save it in a safe place where you can pull it onto a lab computer each time you set up.\nMove a copy of the file to the Desktop of your lab computer.\n\nNow that you have created the file and save it somewhere, you only need to download it to your Desktop in the future.\n\n\nI have a copy of a .bash_profile file that you can download onto your computer with the following command.\ncurl https://raw.githubusercontent.com/utdata/setting-up/main/.bash_profile-lab &gt; .bash_profile\nClose and restart your Terminal. You should be good for the day (or week).\n\n\n\nYou might also consider getting the VS Code preferences I have here: VS code goodies."
  },
  {
    "objectID": "ut-lab.html#test-git-setups",
    "href": "ut-lab.html#test-git-setups",
    "title": "Starting up a UT Lab computer",
    "section": "",
    "text": "Test if it is setup: Open a new Terminal window and check the git configs:\ngit config user.name\nIf it returns your name, great. You can probably stop here.\n\n\nIf git is not set for you, you need to set it.\n\nSet your user.name:\n\ngit config --global user.name \"Your Name\"\nAnd then set your email (with your actual email):\ngit config --global user.email youremail@yourdomain.com\nNext, set the computer to save your credentials after the first time you enter them.\ngit config --global credential.helper osxkeychain\nBe prepared to enter your github username and password.\n\n\n\nWhen you launch Terminal, it should put you in your home directory. If not, do cd ~.\n\nDo the following command to download bash-git-prompt:\n\ngit clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1"
  },
  {
    "objectID": "ut-lab.html#installing-node",
    "href": "ut-lab.html#installing-node",
    "title": "Starting up a UT Lab computer",
    "section": "",
    "text": "First, check if Node is already installed:\n\nnode -v\nIf Node is already installed, you should get back a version number, like “v8.11.4”. If it does, you can probably stop here.\n\n\nIf you didn’t get a version number above, you need to install stuff.\n\nFrom your Terminal, in your home directory, install NVM:\n\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n\nClose and restart your Terminal window.\nNow install the version of Node we wll use:\n\nnvm install v16.13.0\n\nNow install node package manager:\n\nnpm install -g npm\n\nInstall Gulp and Degit:\n\nnpm install -g gulp degit"
  },
  {
    "objectID": "ut-lab.html#google-drive-authentication",
    "href": "ut-lab.html#google-drive-authentication",
    "title": "Starting up a UT Lab computer",
    "section": "",
    "text": "When using the icj-project-template we use a secret key file to authenticate to Google Drive.\n\nIf you haven’t already, follow the directions in macintosh-02.md for Creating a service account key.\n\nIf you have created the file already but don’t have a copy of the file saved, you can go to Google Cloud Platform &gt; APIs & Services &gt; Credentials, edit your existing key and click Create key to download the file.\n\nRename the downloaded file as google_drive_fetch_token.json and save it in a safe place where you can pull it onto a lab computer each time you set up.\nMove a copy of the file to the Desktop of your lab computer.\n\nNow that you have created the file and save it somewhere, you only need to download it to your Desktop in the future.\n\n\nI have a copy of a .bash_profile file that you can download onto your computer with the following command.\ncurl https://raw.githubusercontent.com/utdata/setting-up/main/.bash_profile-lab &gt; .bash_profile\nClose and restart your Terminal. You should be good for the day (or week).\n\n\n\nYou might also consider getting the VS Code preferences I have here: VS code goodies."
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "Notes",
    "section": "",
    "text": "NOTE THIS IS ALL OUT OF DATE\n\n\n\nI’ve switched back to GitHub, but in case this is useful later.\n\nInstall and configure Git\nLearn Git and Bitbucket\nGet started with Bitbucket\nAcademic license\nSSH keys\n\n\n\n\n\nI need to explore how the Terminal in VS Code works. Does it understand unix commands?\nI’d like to find something equivalent to git-bash-prompt, but those features may already be baked into Git Bash.\nWe might consider Chocolatey package manager.\n\n\n\n\n\nDon’t do this unless specifically asked.\n\n\nAn alternate method to install Node might be to use NVM for Windows, but I don’t know for sure.\nYet Another option is to use the Windows package manager Chocolatey.)\n\n\n\n\n\n\n\nI’ve installed node and yarn, but my first attempt complained that I didn’t have gulp.\n\n\n\n\n\nI used this yoember and this medium post to come up with the script above.\nIf you installed Node.js from the website, it will suck and you’ll probably need to uninstall it and try again using NVM. This post was very helpful. Especially which node.\n\n\n\n\nInstall miniconda. Use the Python 3.6 version. Miniconda is python package manager. You are welcome to install the full Anaconda, but it takes more space on your computer."
  },
  {
    "objectID": "notes.html#bitbucket-resources",
    "href": "notes.html#bitbucket-resources",
    "title": "Notes",
    "section": "",
    "text": "I’ve switched back to GitHub, but in case this is useful later.\n\nInstall and configure Git\nLearn Git and Bitbucket\nGet started with Bitbucket\nAcademic license\nSSH keys"
  },
  {
    "objectID": "notes.html#vcs-on-windows",
    "href": "notes.html#vcs-on-windows",
    "title": "Notes",
    "section": "",
    "text": "I need to explore how the Terminal in VS Code works. Does it understand unix commands?\nI’d like to find something equivalent to git-bash-prompt, but those features may already be baked into Git Bash.\nWe might consider Chocolatey package manager."
  },
  {
    "objectID": "notes.html#alternate-installing-of-node-on-windows",
    "href": "notes.html#alternate-installing-of-node-on-windows",
    "title": "Notes",
    "section": "",
    "text": "Don’t do this unless specifically asked.\n\n\nAn alternate method to install Node might be to use NVM for Windows, but I don’t know for sure.\nYet Another option is to use the Windows package manager Chocolatey.)"
  },
  {
    "objectID": "notes.html#scaffold-managers",
    "href": "notes.html#scaffold-managers",
    "title": "Notes",
    "section": "",
    "text": "I’ve installed node and yarn, but my first attempt complained that I didn’t have gulp."
  },
  {
    "objectID": "notes.html#resources-for-uninstalling-node",
    "href": "notes.html#resources-for-uninstalling-node",
    "title": "Notes",
    "section": "",
    "text": "I used this yoember and this medium post to come up with the script above.\nIf you installed Node.js from the website, it will suck and you’ll probably need to uninstall it and try again using NVM. This post was very helpful. Especially which node."
  },
  {
    "objectID": "notes.html#if-we-get-into-python",
    "href": "notes.html#if-we-get-into-python",
    "title": "Notes",
    "section": "",
    "text": "Install miniconda. Use the Python 3.6 version. Miniconda is python package manager. You are welcome to install the full Anaconda, but it takes more space on your computer."
  },
  {
    "objectID": "vscode-goodies.html",
    "href": "vscode-goodies.html",
    "title": "VS Code Goodies",
    "section": "",
    "text": "VS Code is a pretty awesome code editor. It can save you a $4!t-ton of time.\n\n\nIf you look on the left-menu, there is a square looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\nSome of those that I have used (and I’m finding more every day):\n\nNunjucks Templates: gives you syntax highlighting for Nunjucks pages. Needs a little configuration to work with our First Graphics App pages. See Preferences below.\nmarkdownlint: tells you when your Markdown syntax is incorrect.\n\n\n\n\nExcel Viewer: is something to help preview csv files. Not essential, but helpful when working with data.\n\n\n\n\n\nI have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Settings &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\n\n\n\nvs-code-setting-as-code\n\n\n\nIn the new file that opens, copy and paste the code below and replace what is there.\nSave and close the file.\n\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    }\n}\nIf you look through the JSON, you might be able to figure out what some of these do. This isn’t a full description of them, but …\n\nI set default size of text in the editor. I’m old, so I make it bigger so it’s easier to read. If that is too big, you can change it later.\nI set make the text in the terminal window bigger. Still old.\nI set the editor to show spaces that aren’t between words. This makes indented code easier to see.\nI set the tab character to insert two spaces. This is a common coding default.\nI remove the minimap thing that shows by default at the right side of an open file. I find it more of a hassle than useful.\n\nThere are more. They will be helpful."
  },
  {
    "objectID": "vscode-goodies.html#extensions",
    "href": "vscode-goodies.html#extensions",
    "title": "VS Code Goodies",
    "section": "",
    "text": "If you look on the left-menu, there is a square looking icon that gives you a list of extensions that you can search for an enable. See the VS Code docs for more info.\nSome of those that I have used (and I’m finding more every day):\n\nNunjucks Templates: gives you syntax highlighting for Nunjucks pages. Needs a little configuration to work with our First Graphics App pages. See Preferences below.\nmarkdownlint: tells you when your Markdown syntax is incorrect.\n\n\n\n\nExcel Viewer: is something to help preview csv files. Not essential, but helpful when working with data."
  },
  {
    "objectID": "vscode-goodies.html#preferences",
    "href": "vscode-goodies.html#preferences",
    "title": "VS Code Goodies",
    "section": "",
    "text": "I have some helpful user preferences for VS Code that you might find useful.\n\nGo to the Code &gt; Settings &gt; Settings.\nAt the top right of the code editor are a series of icons, including this one:\n\n\n\n\nvs-code-setting-as-code\n\n\n\nIn the new file that opens, copy and paste the code below and replace what is there.\nSave and close the file.\n\n{\n    \"editor.fontSize\": 14,\n    \"terminal.integrated.fontSize\": 12,\n    \"editor.renderWhitespace\": \"boundary\",\n    \"editor.tabSize\": 2,\n    \"[md]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 2\n    },\n    \"editor.renderControlCharacters\": true,\n    \"highlight-matching-tag.style\": {\n        \"backgroundColor\": \"rgba(63, 191, 63, 0.20)\"\n    },\n    \"editor.wordWrap\": \"on\",\n    \"window.zoomLevel\": 0,\n    \"editor.minimap.enabled\": false,\n    \"files.associations\": {\n        \"*.html\": \"html\"\n    },\n    \"emmet.includeLanguages\": {\n        \"njk\": \"html\",\n        \"nunjucks\": \"html\"\n    }\n}\nIf you look through the JSON, you might be able to figure out what some of these do. This isn’t a full description of them, but …\n\nI set default size of text in the editor. I’m old, so I make it bigger so it’s easier to read. If that is too big, you can change it later.\nI set make the text in the terminal window bigger. Still old.\nI set the editor to show spaces that aren’t between words. This makes indented code easier to see.\nI set the tab character to insert two spaces. This is a common coding default.\nI remove the minimap thing that shows by default at the right side of an open file. I find it more of a hassle than useful.\n\nThere are more. They will be helpful."
  },
  {
    "objectID": "index.html#part-1-vs-code-git-github",
    "href": "index.html#part-1-vs-code-git-github",
    "title": "Setting up your computer for development",
    "section": "",
    "text": "Macintosh Part 1\nWindows Part 1\nLinux/Ubuntu"
  },
  {
    "objectID": "index.html#part-2-node.js-and-npm",
    "href": "index.html#part-2-node.js-and-npm",
    "title": "Setting up your computer for development",
    "section": "",
    "text": "This part we will do later in the year, once we start using it.\n\nMacintosh Part 2\nWindows Part 2"
  },
  {
    "objectID": "index.html#other-resources",
    "href": "index.html#other-resources",
    "title": "Setting up your computer for development",
    "section": "",
    "text": "VS Code Goodies\ngcloud commands\nicj-project-rig for Codespaces"
  }
]